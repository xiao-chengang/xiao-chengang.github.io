<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>码农的自我修养</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xiao-chengang.github.io/"/>
  <updated>2018-03-23T14:29:25.000Z</updated>
  <id>http://xiao-chengang.github.io/</id>
  
  <author>
    <name>肖晨刚</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>window对象</title>
    <link href="http://xiao-chengang.github.io/2018/03/22/javascript/window%E5%AF%B9%E8%B1%A1/"/>
    <id>http://xiao-chengang.github.io/2018/03/22/javascript/window对象/</id>
    <published>2018-03-22T08:55:24.000Z</published>
    <updated>2018-03-23T14:29:25.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="window对象"><a href="#window对象" class="headerlink" title="window对象"></a>window对象</h1><p>##概述</p><p>javascript所有对象都在<code>window</code>这个<strong>顶层对象</strong>之中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">window</span>.a <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><blockquote><p>所有未声明就赋值的变量都自动变成window对象的属性。<br><a id="more"></a></p></blockquote><h2 id="窗口"><a href="#窗口" class="headerlink" title="窗口"></a>窗口</h2><ul><li><p>window.screenX，window.screenY</p><ul><li>返回浏览器窗口左上角相对于当前屏幕左上角（(0, 0)）的水平距离和垂直距离，单位为像素。</li></ul></li><li><p>window.innerHeight，window.innerWidth</p><ul><li>返回网页在当前窗口中可见部分的高度和宽度，即“视口”（viewport），单位为像素。</li></ul></li><li><p>window.outerHeight，window.outerWidth</p><ul><li>返回浏览器窗口的高度和宽度，包括浏览器菜单和边框，单位为像素。</li></ul></li><li><p>window.pageXOffset属性，window.pageYOffset属性</p><ul><li>window.pageXOffset属性返回页面的水平滚动距离，window.pageYOffset属性返回页面的垂直滚动距离，单位都为像素。</li></ul></li><li><p>screen.height、screen.width</p><ul><li><code>screen.availHeight</code>和<code>screen.availWidth</code>属性返回屏幕可用的高度和宽度，单位为像素。它们的值为屏幕的实际大小减去操作系统某些功能占据的空间，比如系统的任务栏。<ul><li><code>screen.colorDepth</code>属性返回屏幕的颜色深度，一般为16（表示16-bit）或24（表示24-bit）。</li></ul></li></ul></li><li><p><code>Element.clientHeight</code>:返回元素内部的高度(单位像素)，包含内边距，但不包括水平滚动条、边框和外边距。</p><ul><li>clientHeight = height + padding</li></ul></li><li><p><code>Element.clientWidth</code>: 属性表示元素的内部宽度，以像素计。该属性包括内边距，但不包括垂直滚动条（如果有）、边框和外边距。</p><ul><li>clientWidth = width + padding</li></ul></li><li><p><code>Element.clientLeft</code>:表示一个元素的左边框的宽度</p><ul><li>clientLeft = border-left-width</li></ul></li><li><p><code>Element.clientTop</code>:一个元素顶部边框的宽度</p><ul><li>clientTop = border-top-width</li></ul></li></ul><h2 id="navigator对象"><a href="#navigator对象" class="headerlink" title="navigator对象"></a>navigator对象</h2><ul><li>navigator.userAgent属性</li></ul><p>返回浏览器的User-Agent字符串，用来标示浏览器的种类。</p><p>我目前浏览器信息：</p><blockquote><p>mozilla/5.0 (windows nt 10.0; wow64) applewebkit/537.36 (khtml, like gecko) chrome/50.0.2661.94 safari/537.36”</p></blockquote><blockquote><p>参考：<a href="http://javascript.ruanyifeng.com/bom/window.html" target="_blank" rel="noopener">http://javascript.ruanyifeng.com/bom/window.html</a></p></blockquote><p>浏览器窗体模型:</p><p>$(window)：  浏览器显示网页内容的部分</p><p>$(document):整个网页文档流</p><p>$(“body”):就是body</p><blockquote><p><a href="http://www.cnblogs.com/luhe/archive/2012/11/08/2760619.html" target="_blank" rel="noopener">http://www.cnblogs.com/luhe/archive/2012/11/08/2760619.html</a></p></blockquote><h2 id="BOM对象"><a href="#BOM对象" class="headerlink" title="BOM对象"></a>BOM对象</h2><p>window 也是 BOM 的一个对象，除去编程意义上的“兜底对象”之外，通过这个对象可以获取窗口位置、确定窗口大小、弹出对话框等等。例如我要关闭当前窗口：</p><pre><code>window.close();</code></pre><p>DOM 是为了操作文档出现的 API，document 是其的一个对象；</p><p>BOM 是为了操作浏览器出现的 API，window 是其的一个对象。</p><h3 id="window下的全局变量"><a href="#window下的全局变量" class="headerlink" title="window下的全局变量:"></a><code>window</code>下的全局变量:</h3><ul><li><p><code>innerHeight/innerWidth</code>：浏览器窗口内部高度/宽度；</p></li><li><p><code>navigator</code>：包含有关访问者浏览器的信息；</p></li><li><p><code>screen</code>：访问者屏幕的宽度，以像素计；</p></li><li><p><code>setTimeout()/clearTimeout()</code>：定时器/取消定时；</p></li><li><p><code>document.cookie</code>：现在多数网站使用Cookie来识别用户。</p></li><li><p><code>window.location</code>:对象用于访问当前 URL，或者导航到新的页面。</p><ul><li><code>hostname</code>：web 主机的域名</li><li><code>pathname</code>：当前页面的路径和文件名</li><li><code>port</code>：web 主机的端口</li><li><code>protocol</code>：所使用的 web 协议（http:// 或 https://）</li><li><code>href</code>：当前url，对它赋值可以实现重定向</li><li><code>reload()</code>：这是一个方法，调用后会刷新当前页面</li></ul></li></ul><h4 id="window-history"><a href="#window-history" class="headerlink" title="window.history"></a>window.history</h4><p><code>Window.history</code>保存用户在一个<strong>会话期间</strong>的网站访问记录，用户每次访问一个新的URL即创建一个新的历史记录。</p><ul><li><code>history.back()</code>: 与在浏览器点击后退按钮相同</li><li><code>history.forward()</code>: 与在浏览器中点击按钮向前相同</li><li><code>history.go(num)</code>: 表示向前或向后翻多少页</li></ul><ul><li>history.pushState(stateObj,title,url)</li></ul><p>第一个参数是一个当前的状态对象；第二个是页面标题，但浏览器一般会忽略。第三个是地址参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> stateObj = &#123; <span class="attr">foo</span>: <span class="string">"bar"</span> &#125;;</span><br><span class="line">history.pushState(stateObj, <span class="string">"page 2"</span>, <span class="string">"bar.html"</span>);</span><br></pre></td></tr></table></figure><p>在浏览器中运行这段代码，地址栏会变化成<code>***/bar.html</code>，但不会加载页面，<code>window.history.length</code>会增加1。<br>如果再点击另一个页面，点击返回按钮会加载<code>***/bar.html</code>页面。</p><p><code>history.replaceState(state, title, url)</code>与上面接近，用新的state和URL替换当前的，<code>window.history.length</code>不增加。</p><p><code>window.onpopstate</code>会在浏览器前进或者后退的时候触发，<code>history.pushState()</code>或者<code>history.replaceState()</code>不会触发popstate事件.</p><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/History_API" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/History_API</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;window对象&quot;&gt;&lt;a href=&quot;#window对象&quot; class=&quot;headerlink&quot; title=&quot;window对象&quot;&gt;&lt;/a&gt;window对象&lt;/h1&gt;&lt;p&gt;##概述&lt;/p&gt;
&lt;p&gt;javascript所有对象都在&lt;code&gt;window&lt;/code&gt;这个&lt;strong&gt;顶层对象&lt;/strong&gt;之中。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.a &lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;所有未声明就赋值的变量都自动变成window对象的属性。&lt;br&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://xiao-chengang.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://xiao-chengang.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>DOM对象</title>
    <link href="http://xiao-chengang.github.io/2018/03/06/javascript/DOM%E5%AF%B9%E8%B1%A1/"/>
    <id>http://xiao-chengang.github.io/2018/03/06/javascript/DOM对象/</id>
    <published>2018-03-06T08:55:24.000Z</published>
    <updated>2018-03-23T14:29:25.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DOM对象"><a href="#DOM对象" class="headerlink" title="DOM对象"></a>DOM对象</h1><h2 id="this-与-e-target"><a href="#this-与-e-target" class="headerlink" title="this 与 e.target"></a>this 与 e.target</h2><p>js中事件是会冒泡的，所以this是可以变化的，但event.target不会变化，它永远是直接接受事件的目标DOM元素；</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">例子1：</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"T"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> T = <span class="built_in">document</span>.getElementById(<span class="string">"T"</span>);</span></span><br><span class="line"><span class="javascript">            T.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">//用id为"T"的元素注册监听器</span></span></span><br><span class="line"><span class="javascript">                alert(event.currentTarget === <span class="keyword">this</span>); <span class="comment">//true</span></span></span><br><span class="line"><span class="javascript">                alert(event.target === <span class="keyword">this</span>); <span class="comment">//true</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>事件作用的元素（对象）   =   注册监听器的元素(对象)<br>event.currentTarget   =  this  =    event.target   =   事件作用的元素（对象）    –(例子中的T)</p><p>用最简单的语言总结：</p><table><thead><tr><th>—–</th><th>——</th></tr></thead><tbody><tr><td>target:</td><td>代表当前目标对象（事件作用的对象）</td></tr><tr><td>currentTarget:</td><td>代表注册监听器的对象</td></tr><tr><td>this:</td><td>和currentTarget一样，即它们的作用相等。</td></tr></tbody></table><blockquote><p><a href="http://www.webhek.com/event-delegate/" target="_blank" rel="noopener">http://www.webhek.com/event-delegate/</a></p></blockquote><p>“事件绑定”是针对每个元素进行事件绑定处理，但是新的元素并没有进行事件绑定处理；而“事件委托”，是针对某个选择器下的某种元素，都进行事件处理。所以，只需要这些元素符合这个条件，都会进行事件处理。</p><h2 id="DOM对象-1"><a href="#DOM对象-1" class="headerlink" title="DOM对象"></a>DOM对象</h2><blockquote><p>DOM 全称是 Document Object Model，也就是文档对象模型。</p></blockquote><p>DOM 就是针对 HTML 和 XML 提供的一个API。什么意思？就是说<strong>为了能以编程的方法操作这个 HTML 的内容</strong>（比如添加某些元素、修改元素的内容、删除某些元素）。</p><pre><code>document.title = &apos;how to make love&apos;;</code></pre><p>当浏览器下载到一个网页，通常是 HTML，这个 HTML 就叫 document。</p><p>document 通常是整个 DOM 树的根节点，可以通过iframe加载更多页面。</p><p>可以通过document访问其子节点。</p><p>DOM 是为了操作文档出现的 API，document 是其的一个对象；</p><p>BOM 是为了操作浏览器出现的 API，window 是其的一个对象。</p><h2 id="视口数值的获取"><a href="#视口数值的获取" class="headerlink" title="视口数值的获取"></a>视口数值的获取</h2><h3 id="object-getBoundingClientRect"><a href="#object-getBoundingClientRect" class="headerlink" title="object.getBoundingClientRect()"></a>object.getBoundingClientRect()</h3><p><code>object.getBoundingClientRect()</code>方法返回元素的大小及其相对于视口的位置。</p><p><img src="img/rect.png" alt="rect.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">id</span>=<span class="string">"box"</span> <span class="attr">style</span>=<span class="string">"width:400px;margin:20px;border:1px solid #efefef;"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> len=<span class="built_in">document</span>.getElementById(<span class="string">'box'</span>).getBoundingClientRect();</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.dir(len);</span></span><br><span class="line"><span class="javascript"><span class="comment">//ClientRect &#123;top: 20, right: 422, bottom: 222, left: 20, width: 402…&#125;</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Element-clientWidth与Element-clientHeight"><a href="#Element-clientWidth与Element-clientHeight" class="headerlink" title="Element.clientWidth与Element.clientHeight"></a>Element.clientWidth与Element.clientHeight</h3><p>表示元素的内部宽度与高度，以像素计。该属性包括内边距，但不包括垂直滚动条（如果有）、边框和外边距。</p><h3 id="window-outerWidth与window-outerHeight"><a href="#window-outerWidth与window-outerHeight" class="headerlink" title="window.outerWidth与window.outerHeight"></a>window.outerWidth与window.outerHeight</h3><p>获得的是加上工具条与滚动条窗口的宽度与高度。</p><h3 id="window-innerWidth与window-innerHeight"><a href="#window-innerWidth与window-innerHeight" class="headerlink" title="window.innerWidth与window.innerHeight"></a>window.innerWidth与window.innerHeight</h3><p>获得的是可视区域的宽高，但是宽度包含了纵向滚动条的宽度。</p><h3 id="document-body-clientWidth与document-body-clientHeight"><a href="#document-body-clientWidth与document-body-clientHeight" class="headerlink" title="document.body.clientWidth与document.body.clientHeight"></a>document.body.clientWidth与document.body.clientHeight</h3><p><code>document.body.clientWidth</code>获得的也是可视区域的宽度，但是<code>document.body.clientHeight</code>获得的是body内容的高度</p><p><img src="img/element.jpg" alt="element.jpg"></p><blockquote><p>上图的<code>body</code>设置了<code>width:100%</code>,所以与<code>document.documentElement.clientHeight</code>相等。</p></blockquote><blockquote><p><a href="http://www.cnblogs.com/moqiutao/p/6639792.html" target="_blank" rel="noopener">http://www.cnblogs.com/moqiutao/p/6639792.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;DOM对象&quot;&gt;&lt;a href=&quot;#DOM对象&quot; class=&quot;headerlink&quot; title=&quot;DOM对象&quot;&gt;&lt;/a&gt;DOM对象&lt;/h1&gt;&lt;h2 id=&quot;this-与-e-target&quot;&gt;&lt;a href=&quot;#this-与-e-target&quot; class=&quot;headerlink&quot; title=&quot;this 与 e.target&quot;&gt;&lt;/a&gt;this 与 e.target&lt;/h2&gt;&lt;p&gt;js中事件是会冒泡的，所以this是可以变化的，但event.target不会变化，它永远是直接接受事件的目标DOM元素；&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;例子1：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;T&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; T = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&quot;T&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;            T.onclick = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123; &lt;span class=&quot;comment&quot;&gt;//用id为&quot;T&quot;的元素注册监听器&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;                alert(event.currentTarget === &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//true&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;                alert(event.target === &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//true&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://xiao-chengang.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://xiao-chengang.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>DOM样式</title>
    <link href="http://xiao-chengang.github.io/2018/03/06/javascript/DOM%E6%A0%B7%E5%BC%8F/"/>
    <id>http://xiao-chengang.github.io/2018/03/06/javascript/DOM样式/</id>
    <published>2018-03-06T08:55:24.000Z</published>
    <updated>2018-03-23T14:29:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>##获取DOM节点样式</p><ul><li>element.style</li></ul><p><code>element.style</code>只能获取写在元素标签中的行内style属性值，无法获取到定义在<code>&lt;style&gt;&lt;/style&gt;</code>和通过<code>&lt;link href=”css.css”&gt;</code>加载进来的样式属性。</p><pre><code>var ele = document.getElementById(&apos;ele&apos;);ele.style.color;    //获取颜色</code></pre><ul><li><p>window.getComputedStyle()</p><a id="more"></a><p><code>window.getComputedStyle()</code>:可以获取当前元素所有最终使用的CSS属性值。</p><p> var ele = document.getElementById(‘ele’);<br> var styles = window.getComputedStyle(ele,null);<br> styles.color;  //获取颜色</p></li></ul><blockquote><p>这个方法接受两个参数,如果不需要伪元素信息，第二个参数可以是null。</p></blockquote><ul><li>element.currentStyle</li></ul><p>IE 专用，返回的是元素当前应用的最终CSS属性值。</p><pre><code>var ele = document.getElementById(&apos;ele&apos;);var style=ele.currentStyle;styles.color;</code></pre><ul><li>getPropertyValue()</li></ul><p>获取CSS样式的直接属性名称</p><pre><code>var ele = document.getElementById(&apos;ele&apos;);window.getComputedStyle(ele,null).getPropertyValue(&apos;color&apos;);</code></pre><blockquote><p>属性名不支持驼峰格式。</p></blockquote><ul><li>getAttribute()</li></ul><p>与getPropertyValue类似，有一点的差异是属性名驼峰格式。</p><pre><code>var test = document.getElementById(&apos;test&apos;);window.getComputedStyle(test, null).getAttribute(&quot;backgroundColor&quot;);//test.getAttribute(&quot;style&quot;);</code></pre><blockquote><p>只能获取标签<code>&lt; style&gt;&lt; /style&gt;</code>内的属性值,也可以直接使用<code>ele.getAttribute()</code>获取标签属性值。<br>这个方法在非IE下 会有兼容问题。</p></blockquote><p>##property与attribute</p><p>在<code>html</code>标签里的属性称为<code>attribute</code>。</p><pre><code>&lt;a href=&quot;/people/mi-si-14&quot; data-tip=&quot;p$b$mi-si-14&quot; data-original_title=&quot;alaki&quot;&gt;alaki&lt;/a&gt;</code></pre><p>这个dom element有3个<strong>attribute</strong>：href、data-tips、data-original_title。</p><p>而<strong>property</strong>是那些它被创建的时候就有的属性，例如attributes, autofocus, className, clientHeight。<br>一些特殊的<strong>attribute</strong>将会转换为<strong>property</strong>。</p><p>假如是内联样式，通过<code>getAttribute(&#39;style&#39;)</code>是可以获得的，但只能获取到内联样式部分属性，通过外部样式表或者内嵌样式都是无法获得的，返回值是字符串。</p><blockquote><p><a href="http://www.cnblogs.com/mengfff/p/5035781.html" target="_blank" rel="noopener">html特殊字符的html，js，css写法汇总</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##获取DOM节点样式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;element.style&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;element.style&lt;/code&gt;只能获取写在元素标签中的行内style属性值，无法获取到定义在&lt;code&gt;&amp;lt;style&amp;gt;&amp;lt;/style&amp;gt;&lt;/code&gt;和通过&lt;code&gt;&amp;lt;link href=”css.css”&amp;gt;&lt;/code&gt;加载进来的样式属性。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var ele = document.getElementById(&amp;apos;ele&amp;apos;);
ele.style.color;    //获取颜色
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;window.getComputedStyle()&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://xiao-chengang.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://xiao-chengang.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>ajax</title>
    <link href="http://xiao-chengang.github.io/2018/03/05/javascript/Ajax/"/>
    <id>http://xiao-chengang.github.io/2018/03/05/javascript/Ajax/</id>
    <published>2018-03-05T08:55:24.000Z</published>
    <updated>2018-03-23T14:29:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>##新建服务器</p><p>####get请求<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//比喻：打开浏览器</span></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"><span class="comment">//比喻：在地址栏输入地址</span></span><br><span class="line">xhr.open(<span class="string">'get'</span>,<span class="string">'1.txt'</span>,<span class="literal">true</span>);</span><br><span class="line"><span class="comment">/*open方法</span></span><br><span class="line"><span class="comment">参数</span></span><br><span class="line"><span class="comment">1.打开方式</span></span><br><span class="line"><span class="comment">2.地址</span></span><br><span class="line"><span class="comment">3.是否异步</span></span><br><span class="line"><span class="comment">异步(true):非阻塞 前面的代码不会影响后面代码的执行</span></span><br><span class="line"><span class="comment">同步(false):阻塞 前面的代码会影响后面代码的执行*/</span></span><br><span class="line"><span class="comment">//如果URL含有中文，会出现乱码，要使用`encodeURI`编码URL。</span></span><br><span class="line"><span class="comment">//提交</span></span><br><span class="line">xhr.send();</span><br><span class="line"><span class="comment">//等待服务器返回内容</span></span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> ( xhr.readyState == <span class="number">4</span> ) &#123;</span><br><span class="line">alert( xhr.responseText );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><p><code>readyState</code>取值：</p><ul><li>0：请求未初始化（还没有调用 open()）。</li><li>1：请求已经建立，但是还没有发送（还没有调用 send()）。</li><li>2：请求已发送，正在处理中（通常现在可以从响应中获取内容头）。</li><li>3：请求在处理中；通常响应中已有部分数据可用了，但是服务器还没有完成响应的生成。</li><li>4：响应已完成；您可以获取并使用服务器的响应了。</li></ul><p>从发送请求到对后端的返回的数据进行处理的状态值变化。<br>但如果没有相应的文件，也有错误信息返回，这是状态值也是一样，所有还需要加入<code>status</code>：</p><pre><code>status : 服务器状态，http状态码status == 200</code></pre><p>返回的是字符串，使用<code>JSON.parse()</code>把字符串转换为<code>json</code>对象。</p><p><code>JSON.stringify()</code>可以把一个对象转换成字符串。</p><p>使用<code>JSON.parse()</code>、<code>JSON.stringify()</code>需严格遵守JSON规范，如属性都需用双引号引起来</p><p>###post请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">'Microsoft.XMLHTTP'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">xhr.open(<span class="string">'post'</span>,<span class="string">'2.post.php'</span>,<span class="literal">true</span>);</span><br><span class="line"><span class="comment">//post方式，数据放在send()里面作为参数传递</span></span><br><span class="line">xhr.setRequestHeader(<span class="string">'content-type'</span>, <span class="string">'application/x-www-form-urlencoded'</span>);</span><br><span class="line"><span class="comment">//申明发送的数据类型</span></span><br><span class="line"><span class="comment">//post没有缓存问题</span></span><br><span class="line"><span class="comment">//无需编码</span></span><br><span class="line">xhr.send(<span class="string">'username=刘伟&amp;age=30'</span>);</span><br></pre></td></tr></table></figure><p>###错误处理</p><p>try、catch、throw</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//var a=12;</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//代码尝试执行这个块中的内容,如果有错误，则会执行catch&#123;&#125;，并且传入错误信息参数</span></span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    <span class="comment">//自己主动抛出错误，但参数接受的是第一个错误。</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'错了错了'</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"哈哈哈"</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(e)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'结束了。。。'</span>)</span><br></pre></td></tr></table></figure><p>###JSONP</p><p><strong>跨域</strong>：跨域名</p><p>一个域名下的文件去请求了和他不一样的域名下的资源文件，那么就会产生跨域请求</p><p>这是浏览器的一个安全策略。</p><p>但可以通过后端请求，解决这个问题。<code>PHP</code>、<code>Nodejs</code>等不受限制。</p><p>首先在js文件创建一个函数<code>fn()</code>,然后后端返回一个包含参数的执行函数，函数就会自动运行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Js文件</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data)</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;script src="2.js"&gt;&lt;/</span>script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//后端返回，以PHP为例</span></span><br><span class="line"></span><br><span class="line">$arr1 = array(<span class="string">'111111'</span>,<span class="string">'22222222'</span>,<span class="string">'33333333'</span>,<span class="string">'4444444'</span>,<span class="string">'555555555555555555555'</span>);</span><br><span class="line">echo <span class="string">'fn('</span>.json_encode($arr1).<span class="string">')'</span></span><br></pre></td></tr></table></figure><p>为防止页面加载就运行，可以使用动态添加<code>script</code>标签，然后才会运行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">oBtn1.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> oScript = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">oScript.src = <span class="string">'getData.php'</span>;</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(oScript);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##新建服务器&lt;/p&gt;
&lt;p&gt;####get请求&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//比喻：打开浏览器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; xhr = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; XMLHttpRequest();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//比喻：在地址栏输入地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xhr.open(&lt;span class=&quot;string&quot;&gt;&#39;get&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;1.txt&#39;&lt;/span&gt;,&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*open方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;	参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;		1.打开方式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;		2.地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;		3.是否异步&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;			异步(true):非阻塞 前面的代码不会影响后面代码的执行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;			同步(false):阻塞 前面的代码会影响后面代码的执行*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//如果URL含有中文，会出现乱码，要使用`encodeURI`编码URL。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//提交&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xhr.send();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//等待服务器返回内容&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xhr.onreadystatechange = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ( xhr.readyState == &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	alert( xhr.responseText );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://xiao-chengang.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://xiao-chengang.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>ES6</title>
    <link href="http://xiao-chengang.github.io/2018/03/03/javascript/es6/"/>
    <id>http://xiao-chengang.github.io/2018/03/03/javascript/es6/</id>
    <published>2018-03-03T08:55:24.000Z</published>
    <updated>2018-03-23T14:29:25.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h1><p>ES6 就是ECMAScript 6是新版本JavaScript语言的标准。</p><h2 id="let-和-const"><a href="#let-和-const" class="headerlink" title="let 和 const"></a>let 和 const</h2><p>ES6 新增了 let 和 const 来声明变量和常量，它们的用法类似var, 但只在代码块中有效。</p><h3 id="let-的基本使用"><a href="#let-的基本使用" class="headerlink" title="let 的基本使用"></a>let 的基本使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="string">'hello'</span>;</span><br><span class="line">    <span class="keyword">let</span> b = <span class="string">'world'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a <span class="comment">// hello</span></span><br><span class="line">b <span class="comment">// Uncaught ReferenceError: a is not defined</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>上述代码表明，let只在他所在的代码块中有效。</p><h3 id="不能重复定义"><a href="#不能重复定义" class="headerlink" title="不能重复定义"></a>不能重复定义</h3><p>let不允许在相同作用域内，重复声明同一个变量。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">'hello'</span>;</span><br><span class="line"><span class="keyword">let</span> a = <span class="string">'world'</span>; <span class="comment">// Uncaught SyntaxError: Identifier 'a' has already been declared</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">s1</span>(<span class="params">arg</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arg;  <span class="comment">// Uncaught SyntaxError: Identifier 'arg' has already been declared</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="不存在变量提升"><a href="#不存在变量提升" class="headerlink" title="不存在变量提升"></a>不存在变量提升</h3><p>var 命令会存在变量提升的问题，在定义之前使用，值为 undefined。<br>let 命令改变了这个行为，必须要在声明后使用，否则报错。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// Uncaught ReferenceError: a is not defined</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="string">'hello world'</span>; </span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 值为 undefined</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="string">'hello kitty'</span></span><br></pre></td></tr></table></figure></p><h3 id="临时锁区（Temporal-Distonrtion-Zone）"><a href="#临时锁区（Temporal-Distonrtion-Zone）" class="headerlink" title="临时锁区（Temporal Distonrtion Zone）"></a>临时锁区（Temporal Distonrtion Zone）</h3><p>保证了let 命令不会受到外部影响。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">s1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    a = <span class="string">'hello world'</span>;  <span class="comment">// Uncaught ReferenceError: a is not defined</span></span><br><span class="line">    <span class="keyword">let</span> a = <span class="string">'hello kitty'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="const-基本使用"><a href="#const-基本使用" class="headerlink" title="const 基本使用"></a>const 基本使用</h3><p>const声明一个只读的常量。一旦声明，常量的值就不能改变。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="string">'hello world!'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// hello world!</span></span><br><span class="line"></span><br><span class="line">a = <span class="string">'hello kitty'</span>; <span class="comment">// Uncaught SyntaxError: Identifier 'a' has already been declared</span></span><br></pre></td></tr></table></figure></p><p>const实际上并不是保证变量的值不能变，而是变量指向的那个内存地址不得改动。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [];</span><br><span class="line">arr[<span class="number">0</span>] = <span class="string">'hello'</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="string">'world'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// ["hello", "world"]</span></span><br><span class="line"></span><br><span class="line">arr = []; <span class="comment">// Uncaught SyntaxError: Identifier 'arr' has already been declared</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> json = &#123;&#125;;</span><br><span class="line">json.name = <span class="string">'LiMing'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(json.name)  <span class="comment">// LiMing</span></span><br><span class="line"></span><br><span class="line">json = &#123;&#125; Uncaught <span class="built_in">SyntaxError</span>: Identifier <span class="string">'json'</span> has already been declared</span><br></pre></td></tr></table></figure></p><p>常量 arr, json 储存的是一个地址，只是保证了地址不可变，但数组和对象本身是可变的，所以依然可以为其添加新属性。</p><h2 id="解构"><a href="#解构" class="headerlink" title="解构"></a>解构</h2><h3 id="数组解构赋值"><a href="#数组解构赋值" class="headerlink" title="数组解构赋值"></a>数组解构赋值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'LiMing'</span>;</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">12</span>;</span><br><span class="line"><span class="comment">// ES5 变量赋值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [name, age] = [<span class="string">'LiMing'</span>, <span class="number">12</span>];</span><br><span class="line"><span class="comment">// 解构赋值</span></span><br></pre></td></tr></table></figure><p>以前为变量赋值，只能直接指定值。ES6中可以按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="string">'LiMing'</span>, <span class="number">12</span>];</span><br><span class="line"><span class="keyword">let</span> [name, age] = a;</span><br><span class="line"><span class="built_in">console</span>.log(name, age) <span class="comment">// LiMing 12</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [,,b] = [<span class="string">'hello'</span>, <span class="string">'world'</span>, <span class="string">'hello kitty'</span>];</span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">// hello kitty</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [one, , two] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(one, two) <span class="comment">// 1 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [s1, ...s2] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(s1, s2)  <span class="comment">// 1  [2, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = [];</span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [a1, a2 ,a3] = [<span class="number">1</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a1, a2)  <span class="comment">// 1 undefined</span></span><br></pre></td></tr></table></figure></p><p>如果解构不成功，变量的值就等于undefined。<br>如果右边的数据不是数组将会报错。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a] = <span class="literal">true</span>; <span class="comment">// TypeError: true is not iterable</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [a] = <span class="literal">NaN</span>; <span class="comment">// TypeError: NaN is not iterable</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [a] = <span class="number">1</span>; <span class="comment">// TypeError: 1 is not iterable</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [a] = <span class="literal">null</span>; <span class="comment">// TypeError: null is not iterable</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [a] = <span class="literal">undefined</span>; <span class="comment">// TypeError: undefined is not iterable</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [a] = &#123;&#125;; <span class="comment">// TypeError: &#123;&#125; is not iterable</span></span><br></pre></td></tr></table></figure></p><h3 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h3><p>解构允许指定默认值<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a = <span class="string">'hello'</span>] = [];</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// hello</span></span><br></pre></td></tr></table></figure></p><p>ES6内部严格使用 === 来判断是否有值，所以只有当一个数组成员严格等于undefined，默认值才会生效。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a = <span class="string">'hello world'</span>] = [<span class="literal">undefined</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// hello world</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [a = <span class="string">'hello world'</span>] = [<span class="literal">null</span>];</span><br><span class="line"><span class="keyword">let</span> [b = <span class="string">'hello kitty'</span>] = [<span class="string">''</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a, b)  <span class="comment">// null ''</span></span><br></pre></td></tr></table></figure></p><h3 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h3><p>解构当然也可以用于对象<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;name, age&#125; = &#123;<span class="attr">name</span>: <span class="string">'LiMing'</span>, <span class="attr">age</span>: <span class="number">12</span>&#125;</span><br><span class="line"><span class="built_in">console</span>.log(name, age)  <span class="comment">// LiMing 12</span></span><br></pre></td></tr></table></figure></p><p>对象解构与数组解构不同。 数组是有顺序的，变量值有位置决定，而对象是无序的，所以变量名必须为对象的属性名<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> json = &#123;<span class="attr">name</span>: <span class="string">'zero'</span>&#125;</span><br><span class="line"><span class="keyword">let</span> &#123;name&#125; = json</span><br><span class="line"><span class="keyword">let</span> &#123;a&#125; = json</span><br><span class="line"><span class="built_in">console</span>.log(name, a) <span class="comment">// zero undefined</span></span><br></pre></td></tr></table></figure></p><p>如果变量名与属性名不一致，则需要：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;<span class="attr">a</span>: name&#125; = &#123;<span class="attr">name</span>: <span class="string">'zero'</span>&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a)  <span class="comment">// zero</span></span><br></pre></td></tr></table></figure></p><h3 id="函数参数解构"><a href="#函数参数解构" class="headerlink" title="函数参数解构"></a>函数参数解构</h3><p>函数的参数当然也可以解构<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">s1</span>(<span class="params">[a, b]</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(s1([<span class="number">1</span>, <span class="number">5</span>])) <span class="comment">// 6</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">&#123;a = <span class="number">0</span>, b = <span class="number">0</span>&#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line">add(&#123;<span class="attr">a</span>: <span class="number">3</span>, <span class="attr">b</span>: <span class="number">8</span>&#125;); <span class="comment">// 11</span></span><br><span class="line">add(&#123;<span class="attr">a</span>: <span class="number">3</span>&#125;); <span class="comment">// 3</span></span><br><span class="line">add(&#123;&#125;); <span class="comment">// 0</span></span><br><span class="line">add(); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ES6&quot;&gt;&lt;a href=&quot;#ES6&quot; class=&quot;headerlink&quot; title=&quot;ES6&quot;&gt;&lt;/a&gt;ES6&lt;/h1&gt;&lt;p&gt;ES6 就是ECMAScript 6是新版本JavaScript语言的标准。&lt;/p&gt;
&lt;h2 id=&quot;let-和-const&quot;&gt;&lt;a href=&quot;#let-和-const&quot; class=&quot;headerlink&quot; title=&quot;let 和 const&quot;&gt;&lt;/a&gt;let 和 const&lt;/h2&gt;&lt;p&gt;ES6 新增了 let 和 const 来声明变量和常量，它们的用法类似var, 但只在代码块中有效。&lt;/p&gt;
&lt;h3 id=&quot;let-的基本使用&quot;&gt;&lt;a href=&quot;#let-的基本使用&quot; class=&quot;headerlink&quot; title=&quot;let 的基本使用&quot;&gt;&lt;/a&gt;let 的基本使用&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;string&quot;&gt;&#39;hello&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; b = &lt;span class=&quot;string&quot;&gt;&#39;world&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a &lt;span class=&quot;comment&quot;&gt;// hello&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;b &lt;span class=&quot;comment&quot;&gt;// Uncaught ReferenceError: a is not defined&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://xiao-chengang.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://xiao-chengang.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>跨域</title>
    <link href="http://xiao-chengang.github.io/2018/03/02/javascript/%E8%B7%A8%E5%9F%9F/"/>
    <id>http://xiao-chengang.github.io/2018/03/02/javascript/跨域/</id>
    <published>2018-03-02T08:55:24.000Z</published>
    <updated>2018-03-23T14:29:25.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h1><h2 id="跨域请求"><a href="#跨域请求" class="headerlink" title="跨域请求"></a>跨域请求</h2><p><code>CORS</code>需要<strong>浏览器</strong>和<strong>服务器</strong>同时支持。</p><p>浏览器将CORS请求分成两类：简单请求（simple request）和非简单请求（not-so-simple request），只要同时满足以下两大条件，就属于简单请求，否则为非简单请求。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(1) 请求方法是以下三种方法之一：</span><br><span class="line">HEAD</span><br><span class="line">GET</span><br><span class="line">POST</span><br><span class="line"></span><br><span class="line">(2) HTTP的头信息不超出以下几种字段：</span><br><span class="line">Accept</span><br><span class="line">Accept-Language</span><br><span class="line">Content-Language</span><br><span class="line">Last-Event-ID</span><br><span class="line">Content-Type：只限于三个值application/x-www-form-urlencoded、multipart/form-data、text/plain</span><br></pre></td></tr></table></figure><a id="more"></a><p><strong>示例代码</strong><br>服务器：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解决跨域</span></span><br><span class="line">app.all(<span class="string">'*'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(req.headers.origin);</span><br><span class="line">    <span class="built_in">console</span>.log(req.get(<span class="string">'host'</span>));</span><br><span class="line">    res.header(<span class="string">'Access-Control-Allow-Origin'</span>, req.headers.origin);</span><br><span class="line">    <span class="comment">// res.header('Access-Control-Allow-Headers', '*');</span></span><br><span class="line">    res.header(<span class="string">'Access-Control-Allow-Credentials'</span>, <span class="literal">true</span>);</span><br><span class="line">    res.header(<span class="string">'Access-Control-Allow-Headers'</span>, <span class="string">'Content-Type, Content-Length, Authorization, Accept, X-Requested-With , yourHeaderFeild'</span>);</span><br><span class="line">    res.header(<span class="string">'Access-Control-Allow-Methods'</span>, <span class="string">'PUT, POST, GET, DELETE, OPTIONS'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (req.method == <span class="string">'OPTIONS'</span>) &#123;</span><br><span class="line">        res.send(<span class="number">200</span>);</span><br><span class="line">        <span class="comment">// 让options请求快速返回</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        next();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.use(<span class="string">'/randomNum'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.send(<span class="built_in">String</span>(<span class="built_in">Math</span>.random()).slice(<span class="number">2</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>浏览器：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">onclick</span>=<span class="string">"req()"</span>&gt;</span>请求<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">req</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// window.location.reload();</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// history.go(0);</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> oAjax=<span class="keyword">new</span> XMLHttpRequest()||<span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//2.连接服务器（打开和服务器的连接）</span></span></span><br><span class="line"><span class="javascript">        oAjax.withCredentials = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">        oAjax.open(<span class="string">'GET'</span>, <span class="string">'http://127.0.0.1:3003/randomNum'</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//3.发送</span></span></span><br><span class="line"><span class="undefined">        oAjax.send();</span></span><br><span class="line"><span class="javascript">        <span class="comment">//4.接收</span></span></span><br><span class="line"><span class="javascript">        oAjax.onreadystatechange=<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span></span></span><br><span class="line"><span class="undefined">        &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(oAjax.readyState==<span class="number">4</span>)</span></span><br><span class="line"><span class="undefined">            &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span>(oAjax.status==<span class="number">200</span>)</span></span><br><span class="line"><span class="undefined">                &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">//alert('成功了：'+oAjax.responseText);</span></span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(oAjax.responseText);</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">document</span>.getElementById(<span class="string">'aa'</span>).innerHTML = oAjax.responseText;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="三个有关字段"><a href="#三个有关字段" class="headerlink" title="三个有关字段"></a>三个有关字段</h3><ul><li>Access-Control-Allow-Origin</li></ul><p>必需，它的值要么是请求时Origin字段的值，要么是一个*，表示接受任意域名的请求。</p><ul><li>Access-Control-Allow-Credentials</li></ul><p>可选，默认为<code>false</code>，表示是否需要浏览器发送<code>cookie</code>。如果为<code>true</code>，浏览器端还需要设置<code>withCredentials</code>属性为<code>true</code>。<br>同时，<code>Access-Control-Allow-Origin</code>不能为星号，应设为浏览器的页面地址，即<code>origin</code>。</p><ul><li>Access-Control-Expose-Headers</li></ul><p>可选，CORS请求时，XMLHttpRequest对象的getResponseHeader()方法只能拿到6个基本字段：<code>Cache-Control</code>、<code>Content-Language</code>、<code>Content-Type</code>、<code>Expires</code>、<code>Last-Modified</code>、<code>Pragma</code>。如果想拿到其他字段，就必需在<code>Access-Control-Expose-Headers</code>里面指定。可设为<code>*</code>，表示可接受任意的字段。</p><h3 id="非简单请求"><a href="#非简单请求" class="headerlink" title="非简单请求"></a>非简单请求</h3><p>非简单的CORS请求，会在正式通信之前发送一个预检请求(<code>OPTIONS</code>)。</p><h4 id="OPTIONS请求头信息："><a href="#OPTIONS请求头信息：" class="headerlink" title="OPTIONS请求头信息："></a><strong>OPTIONS</strong>请求头信息：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Accept:*/*</span><br><span class="line">Accept-Encoding:gzip, deflate, br</span><br><span class="line">Accept-Language:zh-CN,zh;q=0.9,en;q=0.8</span><br><span class="line">Access-Control-Request-Headers:athor</span><br><span class="line">Access-Control-Request-Method:GET</span><br><span class="line">Cache-Control:no-cache</span><br><span class="line">Connection:keep-alive</span><br><span class="line">Host:127.0.0.1:3003</span><br><span class="line">Origin:http://127.0.0.1:9090</span><br></pre></td></tr></table></figure><ul><li>Origin<ul><li>表示请求来源地址</li></ul></li><li>Host<ul><li>请求地址</li></ul></li><li>Access-Control-Request-Method<ul><li>必需，表示CORS用到的方法。</li></ul></li><li>Access-Control-Request-Headers<ul><li>指定浏览器CORS请求会额外发送的头信息字段。</li></ul></li></ul><h4 id="OPTIONS请求回应："><a href="#OPTIONS请求回应：" class="headerlink" title="OPTIONS请求回应："></a><strong>OPTIONS</strong>请求回应：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">X-Powered-By: Express</span><br><span class="line">Access-Control-Allow-Origin: http://127.0.0.1:9090</span><br><span class="line">Access-Control-Allow-Headers: *</span><br><span class="line">Access-Control-Allow-Methods: PUT, POST, GET, DELETE, OPTIONS</span><br><span class="line">Content-Type: text/plain; charset=utf-8</span><br><span class="line">Content-Length: 2</span><br><span class="line">ETag: W/&quot;2-nOO9QiTIwXgNtWtBJezz8kv3SLc&quot;</span><br><span class="line">Date: Thu, 21 Dec 2017 02:58:31 GMT</span><br><span class="line">Connection: keep-alive</span><br></pre></td></tr></table></figure><ul><li>Access-Control-Allow-Origin<ul><li>该字段表示可接受后面地址的请求，星号表示任何地址</li></ul></li></ul><blockquote><p>如果不允许跨域，浏览器会直接报错误。</p></blockquote><p>服务器回应的其他CORS相关字段：</p><ul><li>Access-Control-Allow-Methods<ul><li>必需，表明服务器支持的所有跨域请求的方法。</li></ul></li><li>Access-Control-Allow-Headers<ul><li>必需，表明服务器支持的所有头信息字段</li></ul></li><li>Access-Control-Allow-Credentials<ul><li>与简单请求含义相同</li></ul></li><li>Access-Control-Max-Age<ul><li>该字段可选，用来指定本次预检请求的有效期，单位为秒。</li></ul></li></ul><blockquote><p><a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2016/04/cors.html</a><br><a href="http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html" target="_blank" rel="noopener">浏览器同源政策及其规避方法</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;跨域&quot;&gt;&lt;a href=&quot;#跨域&quot; class=&quot;headerlink&quot; title=&quot;跨域&quot;&gt;&lt;/a&gt;跨域&lt;/h1&gt;&lt;h2 id=&quot;跨域请求&quot;&gt;&lt;a href=&quot;#跨域请求&quot; class=&quot;headerlink&quot; title=&quot;跨域请求&quot;&gt;&lt;/a&gt;跨域请求&lt;/h2&gt;&lt;p&gt;&lt;code&gt;CORS&lt;/code&gt;需要&lt;strong&gt;浏览器&lt;/strong&gt;和&lt;strong&gt;服务器&lt;/strong&gt;同时支持。&lt;/p&gt;
&lt;p&gt;浏览器将CORS请求分成两类：简单请求（simple request）和非简单请求（not-so-simple request），只要同时满足以下两大条件，就属于简单请求，否则为非简单请求。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(1) 请求方法是以下三种方法之一：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;HEAD&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;GET&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;POST&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(2) HTTP的头信息不超出以下几种字段：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Accept&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Accept-Language&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Content-Language&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Last-Event-ID&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Content-Type：只限于三个值application/x-www-form-urlencoded、multipart/form-data、text/plain&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://xiao-chengang.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://xiao-chengang.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>hexo配置</title>
    <link href="http://xiao-chengang.github.io/2018/02/22/hexo/hexo-config/"/>
    <id>http://xiao-chengang.github.io/2018/02/22/hexo/hexo-config/</id>
    <published>2018-02-22T08:04:05.000Z</published>
    <updated>2018-03-23T14:29:25.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="整站配置"><a href="#整站配置" class="headerlink" title="整站配置"></a>整站配置</h1><p>您可以在 _config.yml 中修改大部份的配置。</p><h2 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h2><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">title</td><td style="text-align:left">网站标题</td></tr><tr><td style="text-align:left">subtitle</td><td style="text-align:left">网站副标题</td></tr><tr><td style="text-align:left">description</td><td style="text-align:left">网站描述</td></tr><tr><td style="text-align:left">author</td><td style="text-align:left">您的名字</td></tr><tr><td style="text-align:left">language</td><td style="text-align:left">网站使用的语言</td></tr><tr><td style="text-align:left">timezone</td><td style="text-align:left">网站时区。Hexo 默认使用您电脑的时区。时区列表。比如说：America/New_York, Japan, 和 UTC 。</td></tr></tbody></table><a id="more"></a><p>其中，description主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。author参数用于主题显示文章的作者。</p><h2 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h2><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">描述</th><th style="text-align:left">默认值</th></tr></thead><tbody><tr><td style="text-align:left">url</td><td style="text-align:left">网址</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">root</td><td style="text-align:left">网站根目录</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">permalink</td><td style="text-align:left">文章的 永久链接 格式</td><td style="text-align:left">:year/:month/:day/:title/</td></tr><tr><td style="text-align:left">permalink_defaults</td><td style="text-align:left">永久链接中各部分的默认值</td></tr></tbody></table><blockquote><p>网站存放在子目录<br>如果您的网站存放在子目录中，例如 <code>http://yoursite.com/blog</code>，则请将您的 <code>url</code> 设为 <code>http://yoursite.com/blog</code> 并把 <code>root</code> 设为 <code>/blog/</code>。</p></blockquote><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">描述</th><th style="text-align:left">默认值</th></tr></thead><tbody><tr><td style="text-align:left">source_dir</td><td style="text-align:left">资源文件夹，这个文件夹用来存放内容。</td><td style="text-align:left">source</td></tr><tr><td style="text-align:left">public_dir</td><td style="text-align:left">公共文件夹，这个文件夹用于存放生成的站点文件。</td><td style="text-align:left">public</td></tr><tr><td style="text-align:left">tag_dir</td><td style="text-align:left">标签文件夹</td><td style="text-align:left">tags</td></tr><tr><td style="text-align:left">archive_dir</td><td style="text-align:left">归档文件夹</td><td style="text-align:left">archives</td></tr><tr><td style="text-align:left">category_dir</td><td style="text-align:left">分类文件夹</td><td style="text-align:left">categories</td></tr><tr><td style="text-align:left">code_dir</td><td style="text-align:left">Include code 文件夹</td><td style="text-align:left">downloads/code</td></tr><tr><td style="text-align:left">i18n_dir</td><td style="text-align:left">国际化（i18n）文件夹</td><td style="text-align:left">:lang</td></tr><tr><td style="text-align:left">skip_render</td><td style="text-align:left">跳过指定文件的渲染，您可使用 glob 表达式来匹配路径。</td></tr></tbody></table><blockquote><p>如果您刚刚开始接触Hexo，通常没有必要修改这一部分的值。</p></blockquote><h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">描述</th><th style="text-align:left">默认值</th></tr></thead><tbody><tr><td style="text-align:left">new_post_name</td><td style="text-align:left">新文章的文件名称</td><td style="text-align:left">:title.md</td></tr><tr><td style="text-align:left">default_layout</td><td style="text-align:left">预设布局</td><td style="text-align:left">post</td></tr><tr><td style="text-align:left">auto_spacing</td><td style="text-align:left">在中文和英文之间加入空格</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left">titlecase</td><td style="text-align:left">把标题转换为 title case</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left">external_link</td><td style="text-align:left">在新标签中打开链接</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">filename_case</td><td style="text-align:left">把文件名称转换为 (1) 小写或 (2) 大写</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">render_drafts</td><td style="text-align:left">显示草稿</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left">post_asset_folder</td><td style="text-align:left">启动 Asset 文件夹</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left">relative_link</td><td style="text-align:left">把链接改为与根目录的相对位址</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left">future</td><td style="text-align:left">显示未来的文章</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">highlight</td><td style="text-align:left">代码块的设置</td></tr></tbody></table><blockquote><h3 id="相对地址"><a href="#相对地址" class="headerlink" title="相对地址"></a>相对地址</h3><p>默认情况下，Hexo生成的超链接都是绝对地址。例如，如果您的网站域名为example.com,您有一篇文章名为hello，那么绝对链接可能像这样：<a href="http://example.com/hello.html，它是绝对于域名的。相对链接像这样：/hello.html，也就是说，无论用什么域名访问该站点，都没有关系，这在进行反向代理时可能用到。通常情况下，建议使用绝对地址。" target="_blank" rel="noopener">http://example.com/hello.html，它是绝对于域名的。相对链接像这样：/hello.html，也就是说，无论用什么域名访问该站点，都没有关系，这在进行反向代理时可能用到。通常情况下，建议使用绝对地址。</a></p></blockquote><h2 id="分类-amp-标签"><a href="#分类-amp-标签" class="headerlink" title="分类 &amp; 标签"></a>分类 &amp; 标签</h2><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">描述</th><th style="text-align:left">默认值</th></tr></thead><tbody><tr><td style="text-align:left">default_category</td><td style="text-align:left">默认分类</td><td style="text-align:left">uncategorized</td></tr><tr><td style="text-align:left">category_map</td><td style="text-align:left">分类别名</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">tag_map</td><td style="text-align:left">标签别名</td></tr></tbody></table><h2 id="日期-时间格式"><a href="#日期-时间格式" class="headerlink" title="日期 / 时间格式"></a>日期 / 时间格式</h2><p>Hexo 使用 Moment.js 来解析和显示时间。<br>|参数    |描述    |默认值|<br>|:–|:–|:–|<br>|date_format    |日期格式    |YYYY-MM-DD|<br>|time_format    |时间格式    |H:mm:ss|</p><h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">描述</th><th style="text-align:left">默认值</th></tr></thead><tbody><tr><td style="text-align:left">per_page</td><td style="text-align:left">每页显示的文章量 (0 = 关闭分页功能)</td><td style="text-align:left">10</td></tr><tr><td style="text-align:left">pagination_dir</td><td style="text-align:left">分页目录</td><td style="text-align:left">page</td></tr></tbody></table><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">theme</td><td style="text-align:left">当前主题名称。值为false时禁用主题</td></tr><tr><td style="text-align:left">deploy</td><td style="text-align:left">部署部分的设置</td></tr></tbody></table><!-- # 主题配置 -->]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;整站配置&quot;&gt;&lt;a href=&quot;#整站配置&quot; class=&quot;headerlink&quot; title=&quot;整站配置&quot;&gt;&lt;/a&gt;整站配置&lt;/h1&gt;&lt;p&gt;您可以在 _config.yml 中修改大部份的配置。&lt;/p&gt;
&lt;h2 id=&quot;网站&quot;&gt;&lt;a href=&quot;#网站&quot; class=&quot;headerlink&quot; title=&quot;网站&quot;&gt;&lt;/a&gt;网站&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;参数&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;title&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;网站标题&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;subtitle&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;网站副标题&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;description&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;网站描述&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;author&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;您的名字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;language&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;网站使用的语言&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;timezone&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;网站时区。Hexo 默认使用您电脑的时区。时区列表。比如说：America/New_York, Japan, 和 UTC 。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://xiao-chengang.github.io/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://xiao-chengang.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 开发小技巧</title>
    <link href="http://xiao-chengang.github.io/2018/02/22/javascript/javascript-skill/"/>
    <id>http://xiao-chengang.github.io/2018/02/22/javascript/javascript-skill/</id>
    <published>2018-02-22T08:04:05.000Z</published>
    <updated>2018-03-23T14:29:25.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-开发小技巧"><a href="#JavaScript-开发小技巧" class="headerlink" title="JavaScript 开发小技巧"></a>JavaScript 开发小技巧</h1><h2 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h2><p>下面是一个很好的例子，将一个完整的 if 语句，简写为一行代码。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> x=<span class="number">20</span>;</span><br><span class="line"><span class="keyword">let</span> answer  </span><br><span class="line"><span class="keyword">if</span> (x&gt;<span class="number">10</span>)&#123;</span><br><span class="line">    answer=<span class="string">"greater than 10"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    answer=<span class="string">"less than 10"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以简写为:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> answer =x&gt;<span class="number">10</span>?<span class="string">"greater than 10"</span>:<span class="string">"less than 10"</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><p>当使用纯JavaScript（不依赖外部库，如 jQuery 或lodash）时，下面的简写会非常有用。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span> ; i &lt; array.length ;i++)</span><br></pre></td></tr></table></figure></p><p>可以简写为:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index <span class="keyword">of</span> array)</span><br></pre></td></tr></table></figure></p><p>下面是遍历数组forEach 的简写示例：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>].forEach(<span class="function">(<span class="params">element,index,array</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`array[<span class="subst">$&#123;index&#125;</span>]=<span class="subst">$&#123;element&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br><span class="line">logs:</span><br><span class="line">array[<span class="number">0</span>]=<span class="number">11</span></span><br><span class="line">array[<span class="number">1</span>]=<span class="number">22</span></span><br><span class="line">array[<span class="number">2</span>]=<span class="number">33</span></span><br></pre></td></tr></table></figure></p><h2 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h2><p>在函数开始之前，对变量进行赋值是一种很好的习惯。在申明多个变量时：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x;</span><br><span class="line"><span class="keyword">let</span> y;</span><br><span class="line"><span class="keyword">let</span> z=<span class="number">3</span>;</span><br></pre></td></tr></table></figure></p><p>可以简写为:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x,y,z=<span class="number">3</span>;</span><br></pre></td></tr></table></figure></p><h2 id="使用-代替"><a href="#使用-代替" class="headerlink" title="使用 === 代替 =="></a>使用 === 代替 ==</h2><p>==（或者!=）做对比的时候会将进行对比的两者转换到同一类型再比较。===（或者!==）则不会，他会将进行对比的两者做类型对比和值对比，相对于 == ，=== 的对比会更加严谨。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">10</span>] == <span class="number">10</span> <span class="comment">// true</span></span><br><span class="line">[<span class="number">10</span>] === <span class="number">10</span> <span class="comment">// false</span></span><br><span class="line"><span class="string">"10"</span> == <span class="number">10</span> <span class="comment">// true</span></span><br><span class="line"><span class="string">"10"</span> === <span class="number">10</span> <span class="comment">// false</span></span><br><span class="line">[] == <span class="number">0</span> <span class="comment">// true</span></span><br><span class="line">[] === <span class="number">0</span> <span class="comment">// false</span></span><br><span class="line"><span class="string">""</span> == <span class="literal">false</span> <span class="comment">// true 但是 true == "a" 是false</span></span><br><span class="line"><span class="string">""</span> === <span class="literal">false</span> <span class="comment">// false</span></span><br></pre></td></tr></table></figure></p><h2 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h2><p>在使用 if 进行基本判断时，可以省略赋值运算符。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (flag===<span class="literal">true</span>)</span><br></pre></td></tr></table></figure></p><p>可以简写为:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (flag)</span><br></pre></td></tr></table></figure></p><h2 id="十进制数"><a href="#十进制数" class="headerlink" title="十进制数"></a>十进制数</h2><p>可以使用科学计数法来代替较大的数据，如可以将 10000000 简写为 1e7。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i=<span class="number">10000000</span>;</span><br></pre></td></tr></table></figure></p><p>可以简写为:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i=<span class="number">1e7</span>;</span><br></pre></td></tr></table></figure></p><h2 id="模版字符串（ES5以下不支持）"><a href="#模版字符串（ES5以下不支持）" class="headerlink" title="模版字符串（ES5以下不支持）"></a>模版字符串（ES5以下不支持）</h2><p>传统的JavaScript语言，输出模板通常是这样写的，字符串拼接很让人头疼，也很容易出错。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#result'</span>).append(</span><br><span class="line">  <span class="string">'There are &lt;b&gt;'</span> + basket.count + <span class="string">'&lt;/b&gt; '</span> +</span><br><span class="line">  <span class="string">'items in your basket, '</span> +</span><br><span class="line">  <span class="string">'&lt;em&gt;'</span> + basket.onSale +</span><br><span class="line">  <span class="string">'&lt;/em&gt; are on sale!'</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p>ES6引入了模板字符串解决这个问题<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#result'</span>).append(<span class="string">`</span></span><br><span class="line"><span class="string">  There are &lt;b&gt;<span class="subst">$&#123;basket.count&#125;</span>&lt;/b&gt; items</span></span><br><span class="line"><span class="string">   in your basket, &lt;em&gt;<span class="subst">$&#123;basket.onSale&#125;</span>&lt;/em&gt;</span></span><br><span class="line"><span class="string">  are on sale!</span></span><br><span class="line"><span class="string">`</span>);</span><br></pre></td></tr></table></figure></p><h2 id="转换数值的更加的方法"><a href="#转换数值的更加的方法" class="headerlink" title="转换数值的更加的方法"></a>转换数值的更加的方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i =<span class="string">"1234"</span></span><br><span class="line">i = + str; <span class="comment">// i=1234</span></span><br></pre></td></tr></table></figure><h2 id="清空一个数组"><a href="#清空一个数组" class="headerlink" title="清空一个数组"></a>清空一个数组</h2><p>你定义一个数组，并希望清空它的内容。通常，你会这样做：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">empty</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//清空数组</span></span><br><span class="line">    list = [];</span><br><span class="line">&#125;</span><br><span class="line">empty();</span><br></pre></td></tr></table></figure></p><p>但是还有一种更高性能的方法。<br>你可以使用这些代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">empty</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//清空数组</span></span><br><span class="line">    list.length = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">empty();</span><br></pre></td></tr></table></figure></p><p>· list =[] 将一个变量指定个引用到那个数组，而其他引用都不受影响。这意味着，对于先前数组的内容的引用仍然保留在内存中，从而导致内存泄漏。<br>· list.length = 0 删除数组内的所有东西，这不需要引用任何其他的东西<br>然而，如果你有一个copy的数组（A和copy-A），如果你使用list.length = 0 删除其内容，副本也会失去它的内容。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> bar = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> foo2 = foo;</span><br><span class="line"><span class="keyword">var</span> bar2 = bar;</span><br><span class="line">foo = [];</span><br><span class="line">bar.length = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">console</span>.log(foo, bar, foo2, bar2);</span><br><span class="line"><span class="comment">//[] [] [1, 2, 3] []</span></span><br></pre></td></tr></table></figure></p><p>StackOverflow上的更多详情：difference-between-array-length-0-and-array</p><h2 id="对数组排序进行”洗牌”-随机排序"><a href="#对数组排序进行”洗牌”-随机排序" class="headerlink" title="对数组排序进行”洗牌”(随机排序)"></a>对数组排序进行”洗牌”(随机排序)</h2><p>这段代码在这里使用Fisher Yates洗牌算法给一个指定的数组进行洗牌(随机排序)。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shuffle</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> m = array.length, i;</span><br><span class="line">    <span class="comment">// 如果还有剩余的需要打乱的元素...</span></span><br><span class="line">    <span class="keyword">while</span> (m) &#123;</span><br><span class="line">        <span class="comment">// 选择一个剩余的元素</span></span><br><span class="line">        i = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * m--);</span><br><span class="line">        <span class="comment">// 和当前元素交换</span></span><br><span class="line">        [array[i],array[m]]=[array[m],array[i]]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>案例：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(shuffle([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>]));</span><br><span class="line"><span class="comment">//[2, 3, 5, 4, 1, 6, 11, 9, 7, 8, 10]</span></span><br></pre></td></tr></table></figure></p><h2 id="在数组插入一个元素"><a href="#在数组插入一个元素" class="headerlink" title="在数组插入一个元素"></a>在数组插入一个元素</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">arr.push(<span class="number">6</span>); <span class="comment">// [1, 2, 4, 5, 6]</span></span><br><span class="line">arr.unshift(<span class="number">0</span>); <span class="comment">// [0, 1, 2, 4, 5, 6]</span></span><br><span class="line">arr.splice(<span class="number">3</span>, <span class="number">0</span>, <span class="number">3</span>); <span class="comment">// [0, 1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure><h2 id="字符排序"><a href="#字符排序" class="headerlink" title="字符排序"></a>字符排序</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'Shanghai'</span>, <span class="string">'New York'</span>, <span class="string">'Mumbai'</span>, <span class="string">'Buenos Aires'</span>].sort();</span><br><span class="line"><span class="comment">// ["Buenos Aires", "Mumbai", "New York", "Shanghai"]</span></span><br></pre></td></tr></table></figure><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i = arr.length, j;</span><br><span class="line">    <span class="keyword">while</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                [arr[j],arr[j + <span class="number">1</span>]]=[arr[j+<span class="number">1</span>],arr[j]]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        i--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="undefined-和-null-的不同"><a href="#undefined-和-null-的不同" class="headerlink" title="undefined 和 null 的不同"></a>undefined 和 null 的不同</h2><ul><li>undefined指的是一个变量未被声明，或者一个变量被声明但未赋值</li><li>null是指一个特定的值，即”没有值”</li><li>JavaScript给未赋值的变量默认定义为undefined</li><li>JavaScript不会给未赋值的变量设置null值，它被程序员用来表示一个无价值的值</li><li>undefined在json格式数据中是无效的，而null有效</li><li>undefined 类型是 undefined</li><li>null类似是object.为什么呢？</li><li>两者都是原始值</li><li>两者都被认为false(Boolean(undefined) // false, Boolean(null) // false)。</li><li>辨认变量是不是undefined<br>typeof variable === “undefined” </li><li>检查变量是不是null<br>variable === “null”<br>从值考虑他们是相等的，但是从类型和值共同考虑他们是不相等的<br>null == undefined // true<br>null === undefined // false <h2 id="严格模式”use-strict”"><a href="#严格模式”use-strict”" class="headerlink" title="严格模式”use strict”"></a>严格模式”use strict”</h2>严格模式的JavaScript让开发人员更加安全的编写JavaScript。<br>默认情况下，JavaScript允许开发者懒惰，例如，我们在第一次声明变量的时候可以不用var，虽然这可能看起来像一个没有经验的开发人员，同时这也是很多错误的根源，变量名拼写错误或意外地将它提到了外部作用域。<br>程序员喜欢让电脑为我们做些无聊的事，检查一些我们工作的错误。”use strict”指令我们做这些，将我们的错误转换成JavaScript的错误。<br>我们把这个指令可以通过添加在一个js文件的顶部：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 整个script文件都将是严格模式语法</span></span><br><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"><span class="keyword">var</span> v = <span class="string">"Hi! I'm a strict mode script!"</span>;</span><br><span class="line">或者在函数内：</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 函数范围内的严格模式语法</span></span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">nested</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="string">"And so am I!"</span>; &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Hi! I'm a strict mode function! "</span> + nested();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="string">"I'm not strict."</span>; &#125;</span><br></pre></td></tr></table></figure></li></ul><p>在包含这个指令的JavaScript文件或者函数内，我们将一些较大的JavaScript项目中的不良行为直接在JavaScript引擎执行中禁止了。在其他情况中，严格模式改变以下的行为：</p><ul><li>变量只有在前面 var 声明了才能用</li><li>试图写入只读属性产生的误差</li><li>必须用 new 关键字调用构造函数</li><li>this 不会默认指向全局对象</li><li>非常有限的使用eval()</li><li>保护保留字符或未来保留字符不被作为变量名使用<br>严格模式在新项目中是很有好处的，但是在大多数地方没使用到它的老项目里使用它是非常具有挑战性的。当你把多个文件合并到一个文件时，它也是个问题，就像可能导致整个文件都在严格模式下执行。<br>它不是一个声明，只是一个字面量，早期版本的浏览器会忽略它。严格模式支持：</li><li>IE 10+</li><li>FF 4+</li><li>Chrome 13+</li><li>Safari 5.1+</li><li>Opera 12+<h2 id="检查一个对象是否有属性"><a href="#检查一个对象是否有属性" class="headerlink" title="检查一个对象是否有属性"></a>检查一个对象是否有属性</h2>当你要检查一个对象是否存在某个属性时，你可能会这样做 ：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObject = &#123;<span class="attr">name</span>: <span class="string">'@tips_js'</span>&#125;;</span><br><span class="line"><span class="keyword">if</span> (myObject.name) &#123; ... &#125;</span><br></pre></td></tr></table></figure></li></ul><p>这是可以的，但你必须知道这个还有两原生的方式，in operator 和 object.hasownproperty，每个对象是对象，既可用方法。每个object都继承自Object，这两个方法都可用。<br>两个方法的一些不同点：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObject = &#123;<span class="attr">name</span>: <span class="string">'@tips_js'</span>&#125;;</span><br><span class="line">myObject.hasOwnProperty(<span class="string">'name'</span>); <span class="comment">// true</span></span><br><span class="line"><span class="string">'name'</span> <span class="keyword">in</span> myObject; <span class="comment">// true</span></span><br><span class="line">myObject.hasOwnProperty(<span class="string">'valueOf'</span>); <span class="comment">// false, valueOf 是从原型链继承的</span></span><br><span class="line"><span class="string">'valueOf'</span> <span class="keyword">in</span> myObject; <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p>他们之间的不同在于检查的性质，换句话说，当该对象本身有查找的属性时hasOwnProperty返回yrue，然而，in operator不区分属性创建的对象和属性继承的原型链。<br>这里有另外一个例子：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myFunc = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'@tips_js'</span>;</span><br><span class="line">&#125;;</span><br><span class="line">myFunc.prototype.age = <span class="string">'10 days'</span>;</span><br><span class="line"><span class="keyword">var</span> user = <span class="keyword">new</span> myFunc();</span><br><span class="line">user.hasOwnProperty(<span class="string">'name'</span>); <span class="comment">// true</span></span><br><span class="line">user.hasOwnProperty(<span class="string">'age'</span>); <span class="comment">// false, 因为age是原型链上的</span></span><br></pre></td></tr></table></figure></p><h2 id="ES6中参数处理"><a href="#ES6中参数处理" class="headerlink" title="ES6中参数处理"></a>ES6中参数处理</h2><p>在许多编程语言中，函数的参数是默认的，而开发人员必须显式定义一个参数是可选的。在JavaScript中的每个参数是可选的，但我们可以这一行为而不让一个函数利用ES6的默认值作为参数。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _err = <span class="function"><span class="keyword">function</span>(<span class="params"> message </span>)</span>&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>( message );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> getSum = <span class="function">(<span class="params">a = _err(<span class="string">'a is not defined'</span></span>), <span class="params">b</span> = <span class="params">_err</span>(<span class="params"><span class="string">'b is not defined'</span></span>)) =&gt;</span> a + b</span><br><span class="line">getSum( <span class="number">10</span> ) <span class="comment">// throws Error, b is not defined</span></span><br><span class="line">getSum( <span class="literal">undefined</span>, <span class="number">10</span> ) <span class="comment">// throws Error, a is not defined</span></span><br></pre></td></tr></table></figure></p><blockquote><p>_err是立即抛出一个错误的函数。如果没有一个参数作为值，默认值是会被使用，_err将被调用，将抛出错误。你可以在Mozilla开发者网络看到的更多默认参数的例子。</p></blockquote><h2 id="测量一个JavaScript代码块性能的技巧"><a href="#测量一个JavaScript代码块性能的技巧" class="headerlink" title="测量一个JavaScript代码块性能的技巧"></a>测量一个JavaScript代码块性能的技巧</h2><p>快速测量一个JavaScript块的性能，我们可以使用控制台的功能像console.time(label)和console.timeEnd(label)<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.time(<span class="string">"Array initialize"</span>);</span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1000</span>),</span><br><span class="line">len = arr.length,</span><br><span class="line">i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">arr[i] = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">"Array initialize"</span>); <span class="comment">// 输出: Array initialize: 0.451904296875ms</span></span><br></pre></td></tr></table></figure></p><p>更多信息Console object, JavaScript benchmarking<br>demo：jsfiddle-codepen (在浏览器控制台输出)</p><h2 id="arrow-函数-ES6"><a href="#arrow-函数-ES6" class="headerlink" title="arrow 函数(ES6)"></a>arrow 函数(ES6)</h2><p>介绍下ES6里的新功能，arrow函数可能会是个很方便的工具，用更少行数写更多代码。他的名字来源于他的语法，=&gt;和小箭头-&gt;比就像一个“胖胖的箭头”。可能有些人知道，这种函数类型和其他静态语言如lambda表达式的匿名函数。它被称为匿名，因为这些箭头函数没有一个描述性的函数名。<br>那么这样有什么好处呢？<br>语法：更少的LOC，不用一次次的键入函数关键字。<br>语义：从上下文中捕捉关键字this。<br>简单语法案例：<br>看看下面的两段代码片段，他们做的是一样的工作。你能很快的理解arrow函数的功能。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// arrow函数的日常语法</span></span><br><span class="line">param =&gt; expression</span><br><span class="line"><span class="comment">// 可能也会写在括号中</span></span><br><span class="line"><span class="comment">// 括号是多参数要求</span></span><br><span class="line">(param1 [, param2]) =&gt; expression</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 使用日常函数</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">5</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">9</span>,<span class="number">1</span>];</span><br><span class="line"><span class="keyword">var</span> arrFunc = arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(arr)</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 使用arrow函数</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">5</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">9</span>,<span class="number">1</span>];</span><br><span class="line"><span class="keyword">var</span> arrFunc = arr.map(<span class="function">(<span class="params">x</span>) =&gt;</span> x*x);</span><br><span class="line"><span class="built_in">console</span>.log(arr)</span><br></pre></td></tr></table></figure></p><p>正如你所看到的，这个例子中的arrow函数可以节省你输入括号内参数和返回关键字的时间。建议把圆括号内的参数输入，如 (x,y) =&gt; x+y 。在不同的使用情况下，它只是用来应对遗忘的一种方式。但是上面的代码也会这样执行：x =&gt; x*x.目前看来，这些仅仅是导致更少的LOC和更好的可读性的句法改进。<br>this 绑定<br>还有一个更好的理由使用arrow函数。那就是在会出现this问题的背景下。使用arrow函数，你就不用担心.bind(this)和 that=this 了。因为arrow函数会从上下文中找到this。<br>看下面的例子：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局定义this.i</span></span><br><span class="line"><span class="keyword">this</span>.i = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">var</span> counterA = <span class="keyword">new</span> CounterA();</span><br><span class="line"><span class="keyword">var</span> counterB = <span class="keyword">new</span> CounterB();</span><br><span class="line"><span class="keyword">var</span> counterC = <span class="keyword">new</span> CounterC();</span><br><span class="line"><span class="keyword">var</span> counterD = <span class="keyword">new</span> CounterD();</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 不好的示例</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CounterA</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// CounterA's `this` 实例 (!! 忽略这里)</span></span><br><span class="line">    <span class="keyword">this</span>.i = <span class="number">0</span>;</span><br><span class="line">    setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// `this` 指全局对象，而不是 CounterA's `this`</span></span><br><span class="line">        <span class="comment">// 因此，开始计数与100，而不是0 (本地的 this.i)</span></span><br><span class="line">        <span class="keyword">this</span>.i++;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"counterA"</span>).innerHTML = <span class="keyword">this</span>.i;</span><br><span class="line">    &#125;, <span class="number">500</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 手动绑定 that = this</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CounterB</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">    setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        that.i++;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"counterB"</span>).innerHTML = that.i;</span><br><span class="line">    &#125;, <span class="number">500</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用 .bind(this)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CounterC</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.i = <span class="number">0</span>;</span><br><span class="line">    setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.i++;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"counterC"</span>).innerHTML = <span class="keyword">this</span>.i;</span><br><span class="line">    &#125;.bind(<span class="keyword">this</span>), <span class="number">500</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用 arrow函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CounterD</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.i = <span class="number">0</span>;</span><br><span class="line">    setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.i++;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"counterD"</span>).innerHTML = <span class="keyword">this</span>.i;</span><br><span class="line">    &#125;, <span class="number">500</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="使用更简单的类似indexOf的包含判断方式"><a href="#使用更简单的类似indexOf的包含判断方式" class="headerlink" title="使用更简单的类似indexOf的包含判断方式"></a>使用更简单的类似indexOf的包含判断方式</h2><p>原生的JavaScript没有contains方法。对检查字符串或字符串数组项中是否存在某值，你可以这样做：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> someText = <span class="string">'JavaScript rules'</span>;</span><br><span class="line"><span class="keyword">if</span> (someText.indexOf(<span class="string">'JavaScript'</span>) !== <span class="number">-1</span>) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="keyword">if</span> (someText.indexOf(<span class="string">'JavaScript'</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>但是我们再看看这些ExpressJs代码片段。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// examples/mvc/lib/boot.js</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line"><span class="comment">// "reserved" exports</span></span><br><span class="line"><span class="keyword">if</span> (~[<span class="string">'name'</span>, <span class="string">'prefix'</span>, <span class="string">'engine'</span>, <span class="string">'before'</span>].indexOf(key)) <span class="keyword">continue</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// examples/lib/utils.js</span></span><br><span class="line">exports.normalizeType = <span class="function"><span class="keyword">function</span>(<span class="params">type</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> ~type.indexOf(<span class="string">'/'</span>)</span><br><span class="line">? acceptParams(type)</span><br><span class="line">: &#123; <span class="attr">value</span>: mime.lookup(type), <span class="attr">params</span>: &#123;&#125; &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// examples/web-service/index.js</span></span><br><span class="line"><span class="comment">// key is invalid</span></span><br><span class="line"><span class="keyword">if</span> (!~apiKeys.indexOf(key)) <span class="keyword">return</span> next(error(<span class="number">401</span>, <span class="string">'invalid api key'</span>));</span><br></pre></td></tr></table></figure></p><p>问题是~位运算符。”运算符执行操作这样的二进制表达式，但他们返回标准的JavaScript的数值.”<br>他们将-1转换为0，而0在JavaScript中又是false。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> someText = <span class="string">'text'</span>;</span><br><span class="line">!!~someText.indexOf(<span class="string">'tex'</span>); <span class="comment">// someText 包含 "tex" - true</span></span><br><span class="line">!~someText.indexOf(<span class="string">'tex'</span>); <span class="comment">// someText 不包含 "tex" - false</span></span><br><span class="line">~someText.indexOf(<span class="string">'asd'</span>); <span class="comment">// someText 不包含 "asd" - false</span></span><br><span class="line">~someText.indexOf(<span class="string">'ext'</span>); <span class="comment">// someText 包含 "ext" - true</span></span><br><span class="line"><span class="built_in">String</span>.prototype.includes()</span><br></pre></td></tr></table></figure></p><p>在ES6(ES 2015)中介绍了includes()方法可以用来确定是否一个字符串包含另一个字符串：<br>‘something’.includes(‘thing’); // true<br>在ECMAScript 2016 (ES7)中，甚至数组都可以这样操作，如indexOf：<br>!!~[1, 2, 3].indexOf(1); // true<br>[1, 2, 3].includes(1); // true<br>不幸的是，这只是在Chrome，Firefox，Safari 9或以上的浏览器中被支持。</p><h2 id="给回调函数传递参数"><a href="#给回调函数传递参数" class="headerlink" title="给回调函数传递参数"></a>给回调函数传递参数</h2><p>在默认情况下，你无法将参数传给回调函数，如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Hi human'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'someelem'</span>).addEventListener(<span class="string">'click'</span>, callback);</span><br></pre></td></tr></table></figure></p><p>你可以采取JavaScript闭包的优点来给回调函数传参，案例如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'sum = '</span>, (a+b));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>, y = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'someelem'</span>).addEventListener(<span class="string">'click'</span>, callback(x, y));</span><br></pre></td></tr></table></figure></p><p>什么是闭包呢？闭包是指一个针对独立的(自由)变量的函数。换句话说，闭包中定义的函数会记住它被创建的环境。了解更多请参阅MDN所以这种方式当被调用的时候，参数X/Y存在于回调函数的作用域内。<br>另一种方法是使用绑定方法。例如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> alertText = <span class="function"><span class="keyword">function</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">alert(text);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'someelem'</span>).addEventListener(<span class="string">'click'</span>, alertText.bind(<span class="keyword">this</span>, <span class="string">'hello'</span>));</span><br></pre></td></tr></table></figure></p><p>两种方法在性能上有一些略微区别，详情参阅jsperf</p><h2 id="Node-js-让module在没被require的时候运行"><a href="#Node-js-让module在没被require的时候运行" class="headerlink" title="Node.js:让module在没被require的时候运行"></a>Node.js:让module在没被require的时候运行</h2><p>在node里，你可以根据代码是运行了require(‘./something.js’)还是node something.js，来告诉你的程序去做两件不同的事情。如果你想与你的一个独立的模块进行交互，这是很有用的。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="built_in">module</span>.parent) &#123;</span><br><span class="line">    <span class="comment">// 运行 `node something.js`</span></span><br><span class="line">    app.listen(<span class="number">8088</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'app listening on port 8088'</span>);</span><br><span class="line">&#125;)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 使用 `require('/.something.js')`</span></span><br><span class="line">    <span class="built_in">module</span>.exports = app;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>更多信息，请看the documentation for modules</p><h2 id="更快的四舍五入"><a href="#更快的四舍五入" class="headerlink" title="更快的四舍五入"></a>更快的四舍五入</h2><p>今天的技巧是关于性能。见到过双波浪线”~~”操作符吗？它有时也被称为double NOT运算符。你可以更快的使用它来作为Math.floor()替代品。为什么呢？<br>单位移~将32位转换输入-(输入+1)，因此双位移将输入转换为-(-(输入+1))，这是个趋于0的伟大的工具。对于输入的数字，它将模仿Math.ceil()取负值和Math.floor()取正值。如果执行失败，则返回0，这可能在用来代替Math.floor()失败时返回一个NaN的时候发挥作用。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单位移</span></span><br><span class="line"><span class="built_in">console</span>.log(~<span class="number">1337</span>) <span class="comment">// -1338</span></span><br><span class="line"><span class="comment">// 双位移</span></span><br><span class="line"><span class="built_in">console</span>.log(~~<span class="number">47.11</span>) <span class="comment">// -&gt; 47</span></span><br><span class="line"><span class="built_in">console</span>.log(~~<span class="number">-12.88</span>) <span class="comment">// -&gt; -12</span></span><br><span class="line"><span class="built_in">console</span>.log(~~<span class="number">1.9999</span>) <span class="comment">// -&gt; 1</span></span><br><span class="line"><span class="built_in">console</span>.log(~~<span class="number">3</span>) <span class="comment">// -&gt; 3</span></span><br><span class="line"><span class="comment">//失败的情况</span></span><br><span class="line"><span class="built_in">console</span>.log(~~[]) <span class="comment">// -&gt; 0 </span></span><br><span class="line"><span class="built_in">console</span>.log(~~<span class="literal">NaN</span>) <span class="comment">// -&gt; 0</span></span><br><span class="line"><span class="built_in">console</span>.log(~~<span class="literal">null</span>) <span class="comment">// -&gt; 0</span></span><br><span class="line"><span class="comment">//大于32位整数则失败</span></span><br><span class="line"><span class="built_in">console</span>.log(~~(<span class="number">2147483647</span> + <span class="number">1</span>) === (<span class="number">2147483647</span> + <span class="number">1</span>)) <span class="comment">// -&gt; 0</span></span><br></pre></td></tr></table></figure></p><p>虽然~~可能有更好的表现，为了可读性，请使用Math.floor()。</p><h2 id="字符串安全连接"><a href="#字符串安全连接" class="headerlink" title="字符串安全连接"></a>字符串安全连接</h2><p>假设你有一些类型未知的变量，你想将它们连接起来。可以肯定的是，算法操作不会在级联时应用：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> one = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> two = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> three = <span class="string">'3'</span>;</span><br><span class="line"><span class="keyword">var</span> result = one + two + three; <span class="comment">//"33" 而不是 "123"</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="string">''</span>+one + two + three; <span class="comment">//"123"</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="string">''</span>.concat(one, two, three); <span class="comment">//"123"</span></span><br></pre></td></tr></table></figure></p><h2 id="返回对象的函数能够用于链式操作"><a href="#返回对象的函数能够用于链式操作" class="headerlink" title="返回对象的函数能够用于链式操作"></a>返回对象的函数能够用于链式操作</h2><p>当创建面向对象的JavaScript对象的function时，函数返回一个对象将能够让函数可链式的写在一起来执行。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Hello my name is: "</span>, <span class="keyword">this</span>.name);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.changeName = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string">"John"</span>);</span><br><span class="line">person.sayName().changeName(<span class="string">"Timmy"</span>).sayName();</span><br><span class="line"><span class="comment">//Hello my name is: John</span></span><br><span class="line"><span class="comment">//Hello my name is: Timmy</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JavaScript-开发小技巧&quot;&gt;&lt;a href=&quot;#JavaScript-开发小技巧&quot; class=&quot;headerlink&quot; title=&quot;JavaScript 开发小技巧&quot;&gt;&lt;/a&gt;JavaScript 开发小技巧&lt;/h1&gt;&lt;h2 id=&quot;三目运算符&quot;&gt;&lt;a href=&quot;#三目运算符&quot; class=&quot;headerlink&quot; title=&quot;三目运算符&quot;&gt;&lt;/a&gt;三目运算符&lt;/h2&gt;&lt;p&gt;下面是一个很好的例子，将一个完整的 if 语句，简写为一行代码。&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; x=&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; answer  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (x&amp;gt;&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    answer=&lt;span class=&quot;string&quot;&gt;&quot;greater than 10&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    answer=&lt;span class=&quot;string&quot;&gt;&quot;less than 10&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以简写为:&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; answer =x&amp;gt;&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;?&lt;span class=&quot;string&quot;&gt;&quot;greater than 10&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;less than 10&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://xiao-chengang.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://xiao-chengang.github.io/tags/javascript/"/>
    
      <category term="tips" scheme="http://xiao-chengang.github.io/tags/tips/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭建GitHub博客</title>
    <link href="http://xiao-chengang.github.io/2018/02/20/hexo/create-hexo/"/>
    <id>http://xiao-chengang.github.io/2018/02/20/hexo/create-hexo/</id>
    <published>2018-02-20T02:55:19.000Z</published>
    <updated>2018-03-23T14:29:25.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexo简介"><a href="#Hexo简介" class="headerlink" title="Hexo简介"></a>Hexo简介</h1><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。<br><a id="more"></a></p><h1 id="基础配置篇"><a href="#基础配置篇" class="headerlink" title="基础配置篇"></a>基础配置篇</h1><p><strong>【注：本文中使用的 Hexo 版本为3.22，部分配置与2.x可能有所出入】</strong></p><ol><li>安装 &amp; 搭建</li></ol><ul><li>安装Git：安装后，注册 Github 账号，配置 SSH（具体见下一步）,打开 Git Bash,- 接下来的命令均在Git Bash中执行</li><li>安装Node.js</li><li>安装 Hexo : $npm install -g hexo</li><li>安装依赖包： $npm install</li><li>新建博客文件夹：cd到该文件夹，执行$hexo init</li><li>新建Github仓库：仓库名必须为你的Github名.github.io，要不然就不能使用Github Pages服务了。。。</li></ul><hr><ol><li><p>配置 SSH</p><p> 关于什么是 SSH，请自行百度（我懒..）这里直接讲一下配置步骤。</p></li></ol><ul><li><p>本地生成公钥私钥 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">　$ssh-keygen -t rsa -C &quot;你的邮件地址&quot;</span><br></pre></td></tr></table></figure></li><li><p>添加公钥到 Github </p><ul><li>根据上一步的提示，找到公钥文件（默认为id_rsa.pub），用记事本打开，全选并复制。</li><li>登录 Github，右上角 头像 -&gt; Settings —&gt; SSH keys —&gt; Add SSH key。把公钥粘贴到key中，填好title并点击 Add key。</li><li>git bash中输入命令$ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>，选yes，等待片刻可看到成功提示。</li></ul></li></ul><hr><ol><li>NexT主题下载<br> NexT 主题是由 iissnan 大神所制作的一款简洁美观不失逼格的主题。下载方法有以下两种：</li></ol><ul><li><p>进入博客根目录<code>/themes/</code>, 执行<code>$git clone</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/iissnan/hexo-theme-next.git</span><br></pre></td></tr></table></figure></li><li><p>直接进入上面的链接，在项目主页download zip文件，然后解压到<code>博客根目录/themes/</code>文件夹</p></li></ul><hr><ol><li>发布<br> 使用以下两条命令进行发布，发布成功后可在浏览器中使用你的github名.github.io进入你的博客~<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$hexo clean</span><br><span class="line">$hexo d -g</span><br></pre></td></tr></table></figure></li></ol><hr><h1 id="Hexo日常使用篇"><a href="#Hexo日常使用篇" class="headerlink" title="Hexo日常使用篇"></a>Hexo日常使用篇</h1><ol><li><p>生成静态页面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">$ hexo g</span><br></pre></td></tr></table></figure></li><li><p>本地预览：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$hexo server//或 hexo s</span><br><span class="line">//然后打开浏览器输入localhost:4000可以预览博客效果，用于调试</span><br></pre></td></tr></table></figure></li><li><p>新建文章</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$hexo new post &quot;title&quot;</span><br><span class="line">//新文章位置：/source/_posts</span><br></pre></td></tr></table></figure></li><li><p>新建页面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$hexo new page &quot;title&quot;</span><br></pre></td></tr></table></figure></li><li><p>部署并生成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$hexo d -g</span><br></pre></td></tr></table></figure></li><li><p>清除生成的文件和缓存</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$hexo clean</span><br></pre></td></tr></table></figure></li></ol><hr><h1 id="config文件配置篇"><a href="#config文件配置篇" class="headerlink" title="_config文件配置篇"></a>_config文件配置篇</h1><h2 id="1-整站配置"><a href="#1-整站配置" class="headerlink" title="1.整站配置"></a>1.整站配置</h2><p>请参照<a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="noopener">hexo官网配置</a></p><h2 id="2-Next主题配置"><a href="#2-Next主题配置" class="headerlink" title="2.Next主题配置"></a>2.Next主题配置</h2><p>请参照<a href="http://theme-next.iissnan.com/theme-settings.html#tags-page" target="_blank" rel="noopener">next主题配置</a></p><h1 id="个人定制模块"><a href="#个人定制模块" class="headerlink" title="个人定制模块"></a>个人定制模块</h1><h2 id="更改代码块颜色及字体大小"><a href="#更改代码块颜色及字体大小" class="headerlink" title="更改代码块颜色及字体大小"></a>更改代码块颜色及字体大小</h2><ol><li>打开\themes\next\source\css\ _variables\base.styl文件</li><li>修改$code-background和$code-foreground的值：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// Code &amp; Code Blocks</span><br><span class="line">// 用``围出的代码块</span><br><span class="line">// --------------------------------------------------</span><br><span class="line">$code-font-family               = $font-family-monospace</span><br><span class="line">$code-font-size                 = 15px # 代码字体大小</span><br><span class="line">$code-background                = #自定义RGB值</span><br><span class="line">$code-foreground                = #自定义RGB值</span><br><span class="line">$code-border-radius             = 4px</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Hexo简介&quot;&gt;&lt;a href=&quot;#Hexo简介&quot; class=&quot;headerlink&quot; title=&quot;Hexo简介&quot;&gt;&lt;/a&gt;Hexo简介&lt;/h1&gt;&lt;p&gt;Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。&lt;br&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://xiao-chengang.github.io/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://xiao-chengang.github.io/tags/hexo/"/>
    
      <category term="blog" scheme="http://xiao-chengang.github.io/tags/blog/"/>
    
      <category term="教程" scheme="http://xiao-chengang.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>git 基本命令</title>
    <link href="http://xiao-chengang.github.io/2018/02/19/git/git-doc/"/>
    <id>http://xiao-chengang.github.io/2018/02/19/git/git-doc/</id>
    <published>2018-02-19T07:09:47.000Z</published>
    <updated>2018-03-23T14:29:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>git 现在的火爆程度非同一般，它被广泛地用在大型开源项目，团队开发，以及独立开发者，甚至学生之中。<br>初学者非常容易被各种命令，参数吓哭。但实际上刚上手你并不需要了解所有命令的用途。你可以从掌握一些简单，强大的命令开始，逐步去学习。（这就是这篇文章要讲的）。好了，上来！</p><h1 id="基本了解"><a href="#基本了解" class="headerlink" title="基本了解"></a>基本了解</h1><p>git命令是一些命令行工具的集合，它可以用来跟踪，记录文件的变动。比如你可以进行保存，比对，分析，合并等等。这个过程被称之为版本控制。已经有一系列的版本控制系统，比如SVN, Mercurial, Perforce, CVS, Bitkeepe等等。</p><p>Git是分布式的，这意味着它并不依赖于中心服务器，任何一台机器都可以有一个本地版本的控制系统，我们称之为仓库。如果是多人协作的话，你需要还需要一个线上仓库，用来同步信息。这就是GitHub, BitBucket的工作。<br><a id="more"></a></p><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p>安装git非常直接：</p><ul><li><p>Linux – 打开控制台，然后通过包管理安装，在Ubuntu上命令是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git-all</span><br></pre></td></tr></table></figure></li><li><p>Windows – 推荐使用git for windows，它包括了图形工具以及命令行模拟器。</p></li><li>OS X – 最简单的方式是使用homebrew安装，命令行执行<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install git</span><br></pre></td></tr></table></figure></li></ul><p>如果你是在是先用图形工具的话，那么推荐你使用<a href="https://desktop.github.com/" target="_blank" rel="noopener">Github desktop</a>,<a href="https://www.atlassian.com/software/sourcetree" target="_blank" rel="noopener">Sourcetree</a>。但我还是推荐你使用命令行，下面的内容就都是命令行的。</p><h2 id="配置Git"><a href="#配置Git" class="headerlink" title="配置Git"></a>配置Git</h2><p>安装完git,首要任务是配置我们的信息，最重要的是用户名及邮箱，打开终端，执行以下命令。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;My Name&quot;</span><br><span class="line">$ git config --global user.email myEmail@example.com</span><br></pre></td></tr></table></figure></p><p>配置好这两项，用户就能知道谁做了什么，并且一切都更有组织性了不是吗？</p><h2 id="创建一个新仓库-–-git-init"><a href="#创建一个新仓库-–-git-init" class="headerlink" title="创建一个新仓库 – git init"></a>创建一个新仓库 – git init</h2><p>git 会把所有文件以及历史记录保存在你的项目中，创建一个新的仓库，首先要去到项目路径，执行 git init。然后git会创建一个隐藏的文件夹.git，所有的信息都储存在其中。</p><p>在桌面创建一个联系文件夹 git_exercise, 打开终端：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd Desktop/git_exercise/</span><br><span class="line">$ git init</span><br></pre></td></tr></table></figure></p><p>OK，现在项目还什么都没有，新建一个 hello.txt 文件试试~</p><h2 id="检查状态-–-git-status"><a href="#检查状态-–-git-status" class="headerlink" title="检查状态 – git status"></a>检查状态 – git status</h2><p>git status 是另一个非常重要的命令，它会告诉我们创库的当前状态：是否为最新代码，有什么更新等等执行git status:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line"> </span><br><span class="line">On branch master</span><br><span class="line"> </span><br><span class="line">Initial commit</span><br><span class="line"> </span><br><span class="line">Untracked files:</span><br><span class="line">  (use &quot;git add ...&quot; to include in what will be committed)</span><br><span class="line"> </span><br><span class="line">hello.txt</span><br></pre></td></tr></table></figure></p><p>git 告诉我们，hello.txt尚未跟踪，这是因为这个文件是新的，git不知道是应该跟踪它的变动呢，还是直接忽略不管呢。为了跟踪我们的新文件，我们需要暂存它。</p><h2 id="暂存-–-git-add"><a href="#暂存-–-git-add" class="headerlink" title="暂存 – git add"></a>暂存 – git add</h2><p>git 有个概念叫 暂存区，你可以把它看成一块空白帆布，包裹着所有你可能会提交的变动。它一开始为空，你可以通过 git add 命令添加内容，并使用 git commit 提交。</p><p>这个例子中只有一个文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add hello.txt</span><br></pre></td></tr></table></figure></p><p>如果需要提交目录下的所有内容，可以这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add -A</span><br></pre></td></tr></table></figure></p><p>再次使用git status查看：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line"> </span><br><span class="line">On branch master</span><br><span class="line"> </span><br><span class="line">Initial commit</span><br><span class="line"> </span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git rm --cached ...&quot; to unstage)</span><br><span class="line"> </span><br><span class="line">new file:   hello.txt</span><br></pre></td></tr></table></figure></p><p>我们的文件已经提交了。状态信息还会告诉我们暂存区文件发生了什么变动，不过这里我们提交的是一个全新文件。</p><h2 id="提交-–-git-commit"><a href="#提交-–-git-commit" class="headerlink" title="提交 – git commit"></a>提交 – git commit</h2><p>一次提交代表着我们的仓库到了一个交付状态，通常是完成了某一块小功能。它就像是一个快照，允许我们像使用时光机一样回到旧时光。</p><p>创建提交，需要我们提交东西到暂存区（git add），然后：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m &quot;Initial commit.&quot;</span><br></pre></td></tr></table></figure></p><p>这就创建了一次提交，-m “Initial commit.”表示对这次提交的描述，建议使用有意义的描述性信息。</p><h1 id="远端仓库"><a href="#远端仓库" class="headerlink" title="远端仓库"></a>远端仓库</h1><p>到目前为止，我们的操作都是在本地的，它存在于.git文件中。为了能够协同开发，我们需要把代码发布到远端仓库上。</p><h2 id="链接远端仓库-–-git-remote-add"><a href="#链接远端仓库-–-git-remote-add" class="headerlink" title="链接远端仓库 – git remote add"></a>链接远端仓库 – git remote add</h2><p>为了能够上传到远端仓库，我们需要先建立起链接，这篇教程中，远端仓库的地址为：<a href="https://github.com/tutorialzine/awesome-project,但你应该自己在Github" target="_blank" rel="noopener">https://github.com/tutorialzine/awesome-project,但你应该自己在Github</a>, BitBucket上搭建仓库，自己一步一步尝试。 添加测试用的远端仓库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add origin https://github.com/tutorialzine/awesome-project.git</span><br></pre></td></tr></table></figure></p><p>一个项目可以同时拥有好几个远端仓库为了能够区分，通常会起不同的名字。通常主远端仓库被称为origin。</p><h2 id="上传到服务器-–-git-push"><a href="#上传到服务器-–-git-push" class="headerlink" title="上传到服务器 – git push"></a>上传到服务器 – git push</h2><p>每次我们要提交代码到服务器上时，都会使用到git push。</p><p>git push命令会有两个参数，远端仓库的名字，以及分支的名字：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin master</span><br><span class="line"> </span><br><span class="line">Counting objects: 3, done.</span><br><span class="line">Writing objects: 100% (3/3), 212 bytes | 0 bytes/s, done.</span><br><span class="line">Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">To https://github.com/tutorialzine/awesome-project.git</span><br><span class="line"> * [new branch]      master -&gt; master</span><br></pre></td></tr></table></figure></p><p>取决于你使用的服务器，push过程你可能需要验证身份。如果没有出差错，现在使用浏览器去你的远端分支上看，hello.txt已经在那里等着你了。</p><h2 id="克隆仓库-–-git-clone"><a href="#克隆仓库-–-git-clone" class="headerlink" title="克隆仓库 – git clone"></a>克隆仓库 – git clone</h2><p>放在Github上的开源项目，人们可以看到你的代码。可以使用 git clone进行下载到本地。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/tutorialzine/awesome-project.git</span><br></pre></td></tr></table></figure></p><p>本地也会创建一个新的仓库，并自动将github上的分支设为远端分支。</p><h2 id="从服务器上拉取代码-–-git-pull"><a href="#从服务器上拉取代码-–-git-pull" class="headerlink" title="从服务器上拉取代码 – git pull"></a>从服务器上拉取代码 – git pull</h2><p>如果你更新了代码到仓库上，其他人可以通过git pull命令拉取你的变动：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git pull origin master</span><br><span class="line">From https://github.com/tutorialzine/awesome-project</span><br><span class="line"> * branch            master     -&gt; FETCH_HEAD</span><br><span class="line">Already up-to-date.</span><br></pre></td></tr></table></figure></p><p>因为暂时没有其他人提交，所有没有任何变动</p><h1 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h1><p>当你在做一个新功能的时候，最好是在一个独立的区域上开发，通常称之为分支。分支之间相互独立，并且拥有自己的历史记录。这样做的原因是：</p><ul><li>稳定版本的代码不会被破坏</li><li>不同的功能可以由不同开发者同时开发。</li><li>开发者可以专注于自己的分支，不用担心被其他人破坏了环境</li><li>在不确定之前，同一个特性可以拥有几个版本，便于比较<h2 id="创建新分支-–-git-branch"><a href="#创建新分支-–-git-branch" class="headerlink" title="创建新分支 – git branch"></a>创建新分支 – git branch</h2>每一个仓库的默认分支都叫master, 创建新分支可以这样：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch amazing_new_feature</span><br></pre></td></tr></table></figure></li></ul><p>创建了一个名为amazing_new_feature的新分支，它跟当前分支同一起点</p><h2 id="切换分支-–-git-checkout"><a href="#切换分支-–-git-checkout" class="headerlink" title="切换分支 – git checkout"></a>切换分支 – git checkout</h2><p>单独使用git branch，可以查看分支状态：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">  amazing_new_feature</span><br><span class="line">* master</span><br></pre></td></tr></table></figure></p><p>* 号表示当前活跃分支为master，使用git checkout切换分支。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout amazing_new_feature</span><br></pre></td></tr></table></figure></p><h2 id="合并分支-–-git-merge"><a href="#合并分支-–-git-merge" class="headerlink" title="合并分支 – git merge"></a>合并分支 – git merge</h2><p>我们的 amazing_new_feature 分支的任务是增加一个featuer.txt。我们来创建，添加到暂存区，提交。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add feature.txt</span><br><span class="line">$ git commit -m &quot;New feature complete.&quot;</span><br></pre></td></tr></table></figure></p><p>新分支任务完成了，回到master分支<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master</span><br></pre></td></tr></table></figure></p><p>现在去查看文件，你会发现，之前创建的feature.txt文件不见了，因为master分支上并没有feature.txt。使用git merge 把 amazing_new_feature 分支合并到master上。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git merge amazing_new_feature</span><br></pre></td></tr></table></figure></p><p>ok! 然后再把amazing_new_feature 分支删掉吧。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -d amazing_new_feature</span><br></pre></td></tr></table></figure></p><h1 id="高级"><a href="#高级" class="headerlink" title="高级"></a>高级</h1><p>这篇文章的最后一节，我们来说些比较高级并且使用的技巧。</p><h2 id="比对两个不同提交之间的差别"><a href="#比对两个不同提交之间的差别" class="headerlink" title="比对两个不同提交之间的差别"></a>比对两个不同提交之间的差别</h2><p>每次提交都有一个唯一id，查看所有提交和他们的id，可以使用 git log:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ git log</span><br><span class="line"> </span><br><span class="line">commit ba25c0ff30e1b2f0259157b42b9f8f5d174d80d7</span><br><span class="line">Author: Tutorialzine</span><br><span class="line">Date:   Mon May 30 17:15:28 2016 +0300</span><br><span class="line"> </span><br><span class="line">    New feature complete</span><br><span class="line"> </span><br><span class="line">commit b10cc1238e355c02a044ef9f9860811ff605c9b4</span><br><span class="line">Author: Tutorialzine</span><br><span class="line">Date:   Mon May 30 16:30:04 2016 +0300</span><br><span class="line"> </span><br><span class="line">    Added content to hello.txt</span><br><span class="line"> </span><br><span class="line">commit 09bd8cc171d7084e78e4d118a2346b7487dca059</span><br><span class="line">Author: Tutorialzine</span><br><span class="line">Date:   Sat May 28 17:52:14 2016 +0300</span><br><span class="line"> </span><br><span class="line">    Initial commit</span><br></pre></td></tr></table></figure></p><p>id 很长，但是你并不需要复制整个字符串，前一小部分就够了。<br>查看某一次提交更新了什么，使用 git show:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ git show b10cc123</span><br><span class="line"> </span><br><span class="line">commit b10cc1238e355c02a044ef9f9860811ff605c9b4</span><br><span class="line">Author: Tutorialzine</span><br><span class="line">Date:   Mon May 30 16:30:04 2016 +0300</span><br><span class="line"> </span><br><span class="line">    Added content to hello.txt</span><br><span class="line"> </span><br><span class="line">diff --git a/hello.txt b/hello.txt</span><br><span class="line">index e69de29..b546a21 100644</span><br><span class="line">--- a/hello.txt</span><br><span class="line">+++ b/hello.txt</span><br><span class="line">  -0,0 +1</span><br><span class="line">+Nice weather today, isn&apos;t it?</span><br></pre></td></tr></table></figure></p><p>查看两次提交的不同，可以使用git diff [commit-from]..[commit-to] 语法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ git diff 09bd8cc..ba25c0ff</span><br><span class="line"> </span><br><span class="line">diff --git a/feature.txt b/feature.txt</span><br><span class="line">new file mode 100644</span><br><span class="line">index 0000000..e69de29</span><br><span class="line">diff --git a/hello.txt b/hello.txt</span><br><span class="line">index e69de29..b546a21 100644</span><br><span class="line">--- a/hello.txt</span><br><span class="line">+++ b/hello.txt</span><br><span class="line">  -0,0 +1</span><br><span class="line">+Nice weather today, isn&apos;t it?</span><br></pre></td></tr></table></figure></p><p>比较首次提交和最后一次提交，我们可以看到所有的更改。当然使用git difftool命令更加方便。</p><h2 id="回滚某个文件到之前的版本"><a href="#回滚某个文件到之前的版本" class="headerlink" title="回滚某个文件到之前的版本"></a>回滚某个文件到之前的版本</h2><p>git 允许我们将某个特定的文件回滚到特定的提交，使用的也是 git checkout。</p><p>下面的例子，我们将hello.txt回滚到最初的状态，需要指定回滚到哪个提交，以及文件的全路径。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout 09bd8cc1 hello.txt</span><br></pre></td></tr></table></figure></p><h2 id="回滚提交"><a href="#回滚提交" class="headerlink" title="回滚提交"></a>回滚提交</h2><p>如果你发现最新的一次提交完了加某个文件，你可以通过 git commit —amend来修复，它会把最新的提交打回暂存区，并尝试重新提交。</p><p>如果是更复杂的情况，比如不是最新的提交了。那你可以使用git revert。</p><p>最新的一次提交别名也叫HEAD。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git revert HEAD</span><br></pre></td></tr></table></figure></p><p>其他提交可以使用id:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git revert b10cc123</span><br></pre></td></tr></table></figure></p><p>混滚提交时，发生冲突是非常频繁的。当文件被后面的提交修改了以后，git不能正确回滚。</p><h2 id="解决合并冲突"><a href="#解决合并冲突" class="headerlink" title="解决合并冲突"></a>解决合并冲突</h2><p>冲突经常出现在合并分支或者是拉去别人的代码。有些时候git能自动处理冲突，但大部分需要我们手动处理。</p><p>比如John 和 Tim 分别在各自的分支上写了两部分代码。<br>John 喜欢 for:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Use a for loop to console.log contents.</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;arr.length;i++)</span><br><span class="line">&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Tim 喜欢 forEach:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Use a for loop to console.log contents.</span></span><br><span class="line">arr.forEach(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>假设John 现在去拉取 Tim的代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git merge tim_branch</span><br><span class="line"> </span><br><span class="line">Auto-merging print_array.js</span><br><span class="line">CONFLICT (content): Merge conflict in print_array.js</span><br><span class="line">Automatic merge failed; fix conflicts and then commit the result.</span><br></pre></td></tr></table></figure></p><p>这时候git并不知道如何解决冲突，因为他不知道John和Tim谁写得更好。</p><p>于是它就在代码中插入标记。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">HEAD</span><br><span class="line">// Use a for loop to console.log contents.</span><br><span class="line">for(var i=0; iarr.length; i++) &#123;</span><br><span class="line">    console.log(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">=======</span><br><span class="line">// Use forEach to console.log contents.</span><br><span class="line">arr.forEach(function(item) &#123;</span><br><span class="line">    console.log(item);</span><br><span class="line">&#125;);</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; Tim s commit.</span><br></pre></td></tr></table></figure></p><p>==== 号上方是当前最新一次提交，下方是冲突的代码。我们需要解决这样的冲突，经过组委会成员讨论，一致认定，在座的各位都是垃圾！两个都不要。改成下面的代码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// Not using for loop or forEach.</span><br><span class="line">// Use Array.toString() to console.log contents.</span><br><span class="line">console.log(arr.toString());</span><br></pre></td></tr></table></figure></p><p>好了，再提交一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add -A</span><br><span class="line">$ git commit -m &quot;Array printing conflict resolved.&quot;</span><br></pre></td></tr></table></figure></p><p>如果在大型项目中，这个过程可能容易出问题。你可以使用GUI 工具来帮助你。使用 git mergetool。</p><h2 id="配置-gitignore"><a href="#配置-gitignore" class="headerlink" title="配置 .gitignore"></a>配置 .gitignore</h2><p>大部分项目中，会有写文件，文件夹是我们不想提交的。为了防止一不小心提交，我们需要gitignore文件：</p><ol><li>在项目根目录创建.gitignore文件</li><li>在文件中列出不需要提交的文件名，文件夹名，每个一行</li><li>.gitignore文件需要提交，就像普通文件一样<br>通常会被ignore的文件有：</li></ol><ul><li>log文件</li><li>task runner builds</li><li>node_modules等文件夹</li><li>IDEs生成的文件</li><li>个人笔记<br>例如：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*.log</span><br><span class="line">build/</span><br><span class="line">node_modules/</span><br><span class="line">.idea/</span><br><span class="line">my_notes.txt</span><br></pre></td></tr></table></figure></li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>教程结束~(撒花)</p><p>git有点复杂，并且有一大堆特性和技巧等着你去挖掘，这篇文章只是提供冰山一角，希望你不要因为太多繁琐的命令而停下前进的脚步！ 怀挺！</p><p>更多学习资源：</p><ul><li><a href="https://git-scm.com/doc" target="_blank" rel="noopener">git 官方文档</a></li><li><a href="https://www.git-scm.com/downloads/guis" target="_blank" rel="noopener">git GUI工具</a></li><li><a href="https://www.gitignore.io/" target="_blank" rel="noopener">在线创建.gitignore</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;git 现在的火爆程度非同一般，它被广泛地用在大型开源项目，团队开发，以及独立开发者，甚至学生之中。&lt;br&gt;初学者非常容易被各种命令，参数吓哭。但实际上刚上手你并不需要了解所有命令的用途。你可以从掌握一些简单，强大的命令开始，逐步去学习。（这就是这篇文章要讲的）。好了，上来！&lt;/p&gt;
&lt;h1 id=&quot;基本了解&quot;&gt;&lt;a href=&quot;#基本了解&quot; class=&quot;headerlink&quot; title=&quot;基本了解&quot;&gt;&lt;/a&gt;基本了解&lt;/h1&gt;&lt;p&gt;git命令是一些命令行工具的集合，它可以用来跟踪，记录文件的变动。比如你可以进行保存，比对，分析，合并等等。这个过程被称之为版本控制。已经有一系列的版本控制系统，比如SVN, Mercurial, Perforce, CVS, Bitkeepe等等。&lt;/p&gt;
&lt;p&gt;Git是分布式的，这意味着它并不依赖于中心服务器，任何一台机器都可以有一个本地版本的控制系统，我们称之为仓库。如果是多人协作的话，你需要还需要一个线上仓库，用来同步信息。这就是GitHub, BitBucket的工作。&lt;br&gt;
    
    </summary>
    
      <category term="git" scheme="http://xiao-chengang.github.io/categories/git/"/>
    
    
      <category term="git" scheme="http://xiao-chengang.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>npm 基本命令</title>
    <link href="http://xiao-chengang.github.io/2018/02/19/nodejs/npm/"/>
    <id>http://xiao-chengang.github.io/2018/02/19/nodejs/npm/</id>
    <published>2018-02-19T07:09:47.000Z</published>
    <updated>2018-03-23T14:29:25.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>npm</code>是一个Node模块登记管理与管理系统。</p><p>##常用命令：</p><p>把<code>npm</code>更新到最新版</p><pre><code>$ npm install npm@latest -g</code></pre><p>查看信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 查看 npm 命令列表</span><br><span class="line">$ npm help</span><br><span class="line"></span><br><span class="line"># 查看各个命令的简单用法</span><br><span class="line">$ npm -l</span><br><span class="line"></span><br><span class="line"># 查看 npm 的版本</span><br><span class="line">$ npm -v</span><br><span class="line"></span><br><span class="line"># 查看 npm 的配置</span><br><span class="line">$ npm config list -l</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="npm-init"><a href="#npm-init" class="headerlink" title="npm init"></a>npm init</h3><p><code>npm init</code>初始化<code>package.json</code>的配置，使用<code>-f</code>(代表force)，<code>-y</code>(代表也是yes)。</p><pre><code>$ npm init -y</code></pre><h3 id="npm-set"><a href="#npm-set" class="headerlink" title="npm set"></a>npm set</h3><p>设置环境变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ npm set init-author-name &apos;Your name&apos;</span><br><span class="line">$ npm set init-author-email &apos;Your email&apos;</span><br><span class="line">$ npm set init-author-url &apos;http://yourdomain.com&apos;</span><br><span class="line">$ npm set init-license &apos;MIT&apos;</span><br></pre></td></tr></table></figure><p>执行<code>npm init</code>时填写的信息，保存在用户目录<code>~/.npmrc</code>文件中。</p><h3 id="npm-info"><a href="#npm-info" class="headerlink" title="npm info"></a>npm info</h3><p><code>npm info</code>命令可以查看每个模块的具体信息，返回javascript对象。</p><h3 id="npm-search"><a href="#npm-search" class="headerlink" title="npm search"></a>npm search</h3><p><code>npm search</code>命令用于搜索npm仓库，它后面可以跟字符串，也可以跟正则表达式。</p><h3 id="npm-list"><a href="#npm-list" class="headerlink" title="npm list"></a>npm list</h3><p><code>npm list</code>命令以树型结构列出当前项目安装的所有模块，以及它们依赖的模块。</p><pre><code>$ npm list</code></pre><p>使用<code>npm list --depth 0</code>可以将树形结构的深度显示为一层。</p><p>加上global参数，会列出全局安装的模块。</p><pre><code>$ npm list -global</code></pre><p>npm list命令也可以列出单个模块。</p><pre><code>$ npm list underscore</code></pre><h3 id="npm-install"><a href="#npm-install" class="headerlink" title="npm install"></a>npm install</h3><p>有<code>-g</code>参数代表全局安装，本地安装的会会在本目录下安装。</p><p>支持从Github代码库地址安装</p><pre><code>$ npm install git://github.com/package/path.git$ npm install git://github.com/package/path.git#0.1.0</code></pre><p>直接使用<code>npm install</code>会安装<code>package.json</code>里的配置文件。</p><p>指定安装版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install sax@latest</span><br><span class="line">$ npm install sax@0.1.1</span><br></pre></td></tr></table></figure><p>版本号含义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">`*`: 任意版本</span><br><span class="line">`1.1.0`: 指定版本</span><br><span class="line">`~1.1.0`: &gt;=1.1.0 &amp;&amp; &lt; 1.2.0</span><br><span class="line">`^1.1.0`: &gt;=1.1.0 &amp;&amp; &lt; 2.0.0</span><br></pre></td></tr></table></figure><p>添加安装信息：</p><ul><li><strong>–save</strong>：模块名将被添加到dependencies，可以简化为参数-S。</li><li><strong>–save-dev</strong>: 模块名将被添加到devDependencies，可以简化为参数-D。</li><li><strong>-save-optionsl</strong>:安装包信息将加入到optionalDependencies（可选阶段的依赖）,简写-O。</li><li><strong>-save-exact</strong>:精确安装指定模块版本。</li></ul><p>一旦安装了某个模块，就可以在代码中用<strong>require</strong>命令调用这个模块。</p><pre><code>var backbone = require(&apos;backbone&apos;)console.log(backbone.VERSION)</code></pre><h3 id="npm-update-npm-uninstall"><a href="#npm-update-npm-uninstall" class="headerlink" title="npm update npm uninstall"></a>npm update npm uninstall</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 升级当前项目的指定模块</span><br><span class="line">$ npm update [package name]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 卸载已安装的模块。</span><br><span class="line">$ npm uninstall [package name]</span><br></pre></td></tr></table></figure><h3 id="npm-run"><a href="#npm-run" class="headerlink" title="npm run"></a>npm run</h3><p><code>npm run</code>命令可以可以运行<code>package.json</code>里的<code>script</code>脚本。</p><h3 id="npm-outdated"><a href="#npm-outdated" class="headerlink" title="npm outdated"></a>npm outdated</h3><p><code>npm outdated</code>检查模块是否过期。</p><h3 id="npm-cache"><a href="#npm-cache" class="headerlink" title="npm cache"></a>npm cache</h3><p><code>npm cache</code>管理模块的缓存</p><pre><code>//查看缓存npm cache ls [&lt;path&gt;&lt;/path&gt;]//清理缓存npm cache clean [&lt;path&gt;&lt;/path&gt;]&lt;/version&gt;&lt;/name&gt;&lt;/tarball&gt;&lt;/folder&gt;&lt;/tarball&gt;</code></pre><h2 id="npm-代理配置"><a href="#npm-代理配置" class="headerlink" title="npm 代理配置"></a>npm 代理配置</h2><h3 id="1-通过-config-配置指向国内镜像源"><a href="#1-通过-config-配置指向国内镜像源" class="headerlink" title="(1)通过 config 配置指向国内镜像源"></a>(1)通过 config 配置指向国内镜像源</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry http://registry.cnpmjs.org //配置指向源</span><br><span class="line">npm info express  //下载安装第三方包</span><br></pre></td></tr></table></figure><h3 id="2-通过-npm-命令指定下载源"><a href="#2-通过-npm-命令指定下载源" class="headerlink" title="(2)通过 npm 命令指定下载源"></a>(2)通过 npm 命令指定下载源</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm --registry http://registry.cnpmjs.org info express</span><br></pre></td></tr></table></figure><h3 id="3-在配置文件-npmrc-文件写入源地址"><a href="#3-在配置文件-npmrc-文件写入源地址" class="headerlink" title="(3)在配置文件 ~/.npmrc 文件写入源地址"></a>(3)在配置文件 ~/.npmrc 文件写入源地址</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nano ~/.npmrc   //打开配置文件</span><br><span class="line">registry =https://registry.npm.taobao.org   //写入配置文件</span><br></pre></td></tr></table></figure><p>推荐最后一种方法，前两个都是临时的。</p><h3 id="全局安装新命令"><a href="#全局安装新命令" class="headerlink" title="全局安装新命令"></a>全局安装新命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;npm&quot;&gt;&lt;a href=&quot;#npm&quot; class=&quot;headerlink&quot; title=&quot;npm&quot;&gt;&lt;/a&gt;npm&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;&lt;code&gt;npm&lt;/code&gt;是一个Node模块登记管理与管理系统。&lt;/p&gt;
&lt;p&gt;##常用命令：&lt;/p&gt;
&lt;p&gt;把&lt;code&gt;npm&lt;/code&gt;更新到最新版&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ npm install npm@latest -g
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;查看信息&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# 查看 npm 命令列表&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ npm help&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 查看各个命令的简单用法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ npm -l&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 查看 npm 的版本&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ npm -v&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 查看 npm 的配置&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ npm config list -l&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="nodejs" scheme="http://xiao-chengang.github.io/categories/nodejs/"/>
    
    
      <category term="npm" scheme="http://xiao-chengang.github.io/tags/npm/"/>
    
      <category term="nodejs" scheme="http://xiao-chengang.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Mac终端使用技巧 切换到其他路径和目录</title>
    <link href="http://xiao-chengang.github.io/2018/02/18/terminal/terminal/"/>
    <id>http://xiao-chengang.github.io/2018/02/18/terminal/terminal/</id>
    <published>2018-02-18T07:09:47.000Z</published>
    <updated>2018-03-23T14:29:25.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>如果你想将当前 command line 会话切换到其他目录，需要用到三个命令：pwd，ls和cd。</strong><br><strong>pwd的含义是“print working directory”，会显示当前目录的绝对路径。</strong><br><strong>ls的含义是“list directory contents”，它会列出当前目录的内容。这个命令还有其他参数可选。</strong><br><strong>cd的含义是“change directory”，它会改变当前目录到你指定的目录。如果你不指定，则会返回你的 home folder。</strong><br><a id="more"></a></p><h2 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h2><p>pwd　　　　　　当前工作目录</p><p>cd（不加参数）　　进root</p><p>cd（folder）　　进入文件夹</p><p>cd ..　　　　　　上级目录</p><p>cd ~　　　　　　返回root</p><p>cd -　　　　　　返回上一个访问的目录</p><p>rm 文件名 　　　　删除</p><p>cat 文件名(|less)　　在终端下查看文件</p><p>ls　　　　　　　　列出目录下所有文件</p><p>cp 文件名 目标目录　　将文件拷贝到目标目录下</p><p>~代表root　　如：~/Document/CPP2/</p><p>mkdiv　　　　　　新建文件夹</p><p>g++ 源文件名　　　　编译源文件，产生a.out</p><p>./文件名　　　　　　运行  例如：./a.out &lt; 输入文件名 &gt; 输出文件名</p><p>control+d　　　　　中断a.out运行</p><p>nano 　　　　　　编写脚本语言　　ctrl+o存储</p><p>nano ….sh　　　　打开</p><p>bash ….sh　　　　运行脚本</p><p>echo “…$i…”　　　输出语句</p><p>tar -zxf abc.tar.gz     tar文件解压</p><p>ssh <a href="mailto:root@192.168.1.222" target="_blank" rel="noopener">root@192.168.1.222</a>   以root账号远程连接222服务器<br>unrar x abc.rar     rar文件解压，需要安装rar工具</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;如果你想将当前 command line 会话切换到其他目录，需要用到三个命令：pwd，ls和cd。&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;pwd的含义是“print working directory”，会显示当前目录的绝对路径。&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;ls的含义是“list directory contents”，它会列出当前目录的内容。这个命令还有其他参数可选。&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;cd的含义是“change directory”，它会改变当前目录到你指定的目录。如果你不指定，则会返回你的 home folder。&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="terminal" scheme="http://xiao-chengang.github.io/categories/terminal/"/>
    
    
      <category term="mac" scheme="http://xiao-chengang.github.io/tags/mac/"/>
    
      <category term="terminal" scheme="http://xiao-chengang.github.io/tags/terminal/"/>
    
      <category term="快捷键" scheme="http://xiao-chengang.github.io/tags/%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    
  </entry>
  
  <entry>
    <title>angular 初探</title>
    <link href="http://xiao-chengang.github.io/2018/02/16/angular/angular/"/>
    <id>http://xiao-chengang.github.io/2018/02/16/angular/angular/</id>
    <published>2018-02-16T07:09:47.000Z</published>
    <updated>2018-03-23T14:29:25.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><ol><li><p>安装cnpm </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install cnpm -g --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></li><li><p>安装angular</p></li></ol><ul><li>用cnpm安装@angular/cli<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @angular/cli</span><br><span class="line"></span><br><span class="line">cnpm install -g @angular/cli</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><blockquote><p>这个CLI是Command Line Interface的简写，是一种命令行接口，实现自动化开发流程.它可以创建项目、添加文件以及执行一大堆开发任务，比如测试、打包和发布。  </p><ul><li>检查版本。输入 ng -v，出现下面的效果，就证明你安装@angluar/cli 成功了。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng -v</span><br></pre></td></tr></table></figure></li></ul></blockquote><ul><li>安装失败时<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall -g @angular/cli  //卸载angular/cli </span><br><span class="line"></span><br><span class="line">npm cache clean  //清除缓存</span><br><span class="line"></span><br><span class="line">cnpm install -g @angular/cli //重新安装</span><br></pre></td></tr></table></figure></li></ul><h1 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h1><p>先到cmd里进入项目所在的目录，用cd命令进入。</p><ol><li><p>新建项目名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng new your_project</span><br></pre></td></tr></table></figure></li><li><p>进入所建目录启动服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd your_project</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install     //安装依赖</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng serve --open  //启动服务</span><br></pre></td></tr></table></figure><h1 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h1><p>Angualr CLI提供了许多常用命令供我们选择：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ng generate class my-new-class              // 新建 class</span><br><span class="line">ng g cl my-new-class                        // 新建 class</span><br><span class="line">ng generate component my-new-component      // 新建组件</span><br><span class="line">ng g c my-new-component                     // 新建组件</span><br><span class="line">ng generate directive my-new-directive      // 新建指令</span><br><span class="line">ng g d my-new-directive                     // 新建指令</span><br><span class="line">ng generate enum my-new-enum                // 新建枚举</span><br><span class="line">ng g e my-new-enum                          // 新建枚举</span><br><span class="line">ng generate module my-new-module            // 新建模块</span><br><span class="line">ng g m my-new-module                        // 新建模块</span><br><span class="line">ng generate pipe my-new-pipe                // 新建管道</span><br><span class="line">ng g p my-new-pipe                          // 新建管道</span><br><span class="line">ng generate service my-new-service          // 新建服务</span><br><span class="line">ng g s my-new-service                       // 新建服务</span><br></pre></td></tr></table></figure></p><h1 id="构建应用程序"><a href="#构建应用程序" class="headerlink" title="构建应用程序"></a>构建应用程序</h1><p>若要构建应用程序，则可以运行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng build</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境搭建&quot; class=&quot;headerlink&quot; title=&quot;环境搭建&quot;&gt;&lt;/a&gt;环境搭建&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;安装cnpm &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install cnpm -g --registry=https://registry.npm.taobao.org&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装angular&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;用cnpm安装@angular/cli&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install -g @angular/cli&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cnpm install -g @angular/cli&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="angular" scheme="http://xiao-chengang.github.io/categories/angular/"/>
    
    
      <category term="angular" scheme="http://xiao-chengang.github.io/tags/angular/"/>
    
  </entry>
  
  <entry>
    <title>洗牌算法</title>
    <link href="http://xiao-chengang.github.io/2018/01/21/javascript/shuffle/"/>
    <id>http://xiao-chengang.github.io/2018/01/21/javascript/shuffle/</id>
    <published>2018-01-21T07:36:04.000Z</published>
    <updated>2018-03-23T14:29:25.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="洗牌算法"><a href="#洗牌算法" class="headerlink" title="洗牌算法"></a>洗牌算法</h1><p>如果你想跟朋友一起玩德州扑克的话，你应该先洗牌，以随机的牌序来确保一个公平的游戏。但是怎么做呢？</p><p>有一个简单而有效的做法就是把牌随机选一叠放到另一边，形成一个新的牌堆，并且重复这一步。只要你从剩余的牌堆中随机选出来的牌的概率是相等的，那么你就会得到一个完美且公平的牌堆。</p><p>假设这不是一副实体的牌，你可能想写一段代码，用内存中的n个元素来做同样的事情。听起来很简单(某种程度上)，但你如何从最初的牌堆中精确的选择一个随机的剩余的元素？<br><a id="more"></a><br>有一个很慢的方法：从开始的地方，在数组中(在[0, n - 1]中)选择一个随机的元素，然后判断是否已经是被打乱了。这个方法可以运行，但是随着剩余元素的减少会变得越来越慢，你会一直选择已经被打乱的元素。观察那些导致洗牌变慢的重复的选择（红色）。</p><p>这里有一段用JavaScript实现的代码，但是你不应该使用它。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shuffle</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> copy = [], n = array.length, i;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果还有剩余的需要打乱的元素...</span></span><br><span class="line">  <span class="keyword">while</span> (n) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 选择一个剩余的元素</span></span><br><span class="line">    i = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * array.length);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果已经打乱，把它移动到新的数组</span></span><br><span class="line">    <span class="keyword">if</span> (i <span class="keyword">in</span> array) &#123;</span><br><span class="line">      copy.push(array[i]);</span><br><span class="line">      <span class="keyword">delete</span> array[i];</span><br><span class="line">      n--;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> copy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个实现是不好的，我们能够做的更好。你可以只选择剩余的元素，避免重复选择。在[0, m - 1]之间选择一个随机数，在每一次循环后，m也会随着n的递减而递减。换句话说，m指的是需要打乱的剩余的元素。当你移动卡牌的时候并且合并剩余的牌，因此你能够很容易的选出下一张要洗的牌。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shuffle</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> copy = [], n = array.length, i;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果还有剩余的需要打乱的元素...</span></span><br><span class="line">  <span class="keyword">while</span> (n) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 选择一个剩余的元素</span></span><br><span class="line">    i = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * n--);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把它移动到新的数组</span></span><br><span class="line">    copy.push(array.splice(i, <span class="number">1</span>)[<span class="number">0</span>]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> copy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段程序运行的非常好，但是还能再次优化性能。主要的问题是当你从原始数组中移动每个元素(array.splice)，你不得不移动该元素后续的所有元素，平均来说，打乱每个元素需要移动n/2个元素。复杂度是 O(n<sup>2</sup>)</p><p>但是有一个非常有意思的地方，如果你认真的观察：每一个被打乱过的元素的数量(n - m)加上剩余的元素的数量(m)会一直等于总长度n。这意味着我们可以原地洗牌，不需要额外的空间！我们在数组的后面的部分存储打乱过的元素，在数组的前面的部分存储剩余的元素。我们不需要关心剩余元素的顺序，只要我们在选择的时候样本一致！</p><p>为了实现这个O(n)复杂度的原地洗牌算法，随机选择一个剩余的元素(从数组的前面)，然后放在新的位置(数组的后面)，还未被打乱的元素交换到数组前面。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shuffle</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> m = array.length, t, i;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果还有剩余的需要打乱的元素...</span></span><br><span class="line">  <span class="keyword">while</span> (m) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 选择一个剩余的元素</span></span><br><span class="line">    i = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * m--);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 和当前元素交换</span></span><br><span class="line">    [array[i],array[m]]=[array[m],array[i]]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;洗牌算法&quot;&gt;&lt;a href=&quot;#洗牌算法&quot; class=&quot;headerlink&quot; title=&quot;洗牌算法&quot;&gt;&lt;/a&gt;洗牌算法&lt;/h1&gt;&lt;p&gt;如果你想跟朋友一起玩德州扑克的话，你应该先洗牌，以随机的牌序来确保一个公平的游戏。但是怎么做呢？&lt;/p&gt;
&lt;p&gt;有一个简单而有效的做法就是把牌随机选一叠放到另一边，形成一个新的牌堆，并且重复这一步。只要你从剩余的牌堆中随机选出来的牌的概率是相等的，那么你就会得到一个完美且公平的牌堆。&lt;/p&gt;
&lt;p&gt;假设这不是一副实体的牌，你可能想写一段代码，用内存中的n个元素来做同样的事情。听起来很简单(某种程度上)，但你如何从最初的牌堆中精确的选择一个随机的剩余的元素？&lt;br&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://xiao-chengang.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://xiao-chengang.github.io/tags/javascript/"/>
    
      <category term="算法" scheme="http://xiao-chengang.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>markdown常用语法</title>
    <link href="http://xiao-chengang.github.io/2018/01/19/markdown/markdown/"/>
    <id>http://xiao-chengang.github.io/2018/01/19/markdown/markdown/</id>
    <published>2018-01-19T07:36:04.000Z</published>
    <updated>2018-03-23T14:29:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>Markdown 是一种轻量级标记语言，它用简洁的语法代替排版，使我们专心于码字。它的目标是实现易读易写，成为一种适用于网络的书写语言。同时，Markdown支持嵌入html标签。<br>注意：Markdown使用#、+、*等符号来标记， 符号后面必须跟上 至少1个 空格才有效！</p><h1 id="MarkDown的常用语法"><a href="#MarkDown的常用语法" class="headerlink" title="MarkDown的常用语法"></a>MarkDown的常用语法</h1><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>Markdown 标题支持两种形式：<br><a id="more"></a></p><h3 id="1、用-标记"><a href="#1、用-标记" class="headerlink" title="1、用#标记"></a>1、用#标记</h3><p>在 <strong>标题开头</strong> 加上1~6个#，依次代表一级标题、二级标题….六级标题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">##### 四级标题</span><br><span class="line">###### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure></p><h3 id="2、用-和-标记"><a href="#2、用-和-标记" class="headerlink" title="2、用=和-标记"></a>2、用=和-标记</h3><p>在 <strong>标题底下</strong> 加上任意个=代表一级标题，-代表二级标题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">一级标题</span><br><span class="line">======</span><br><span class="line"></span><br><span class="line">二级标题</span><br><span class="line">----------</span><br></pre></td></tr></table></figure></p><p>效果如下：</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><hr><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>Markdown 支持有序列表和无序列表。</p><p><strong>无序列表使用-、+和*作为列表标记：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- Red</span><br><span class="line">- Green</span><br><span class="line">- Blue</span><br><span class="line"></span><br><span class="line">* Red</span><br><span class="line">* Green</span><br><span class="line">* Blue</span><br><span class="line"></span><br><span class="line">+ Red</span><br><span class="line">+ Green</span><br><span class="line">+ Blue</span><br></pre></td></tr></table></figure></p><p>效果如下：</p><ul><li>Red</li><li>Green</li><li>Blue</li></ul><p><strong>有序列表则使用数字加英文句点.来表示：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. Red</span><br><span class="line">2. Green</span><br><span class="line">3. Blue</span><br></pre></td></tr></table></figure></p><p>效果如下：</p><ol><li>Red</li><li>Green</li><li>Blue</li></ol><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>引用以&gt;来表示，引用中支持多级引用、标题、列表、代码块、分割线等常规语法。</p><p>常见的引用写法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&gt; 这是一段引用    //在`&gt;`后面有 1 个空格</span><br><span class="line">&gt; </span><br><span class="line">&gt;     这是引用的代码块形式    //在`&gt;`后面有 5 个空格</span><br><span class="line">&gt;     </span><br><span class="line">&gt; 代码例子：</span><br><span class="line">&gt;   </span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&gt; 一级引用</span><br><span class="line">&gt; &gt; 二级引用</span><br><span class="line">&gt; &gt; &gt; 三级引用</span><br><span class="line"></span><br><span class="line">&gt; #### 这是一个四级标题</span><br><span class="line">&gt; </span><br><span class="line">&gt; 1. 这是第一行列表项</span><br><span class="line">&gt; 2. 这是第二行列表项</span><br></pre></td></tr></table></figure></p><p>效果如下：</p><blockquote><p>这是一段引用</p><pre><code>这是引用的代码块形式    //在`&gt;`后面有 5 个空格</code></pre><p>代码例子：</p><pre><code>protected void onCreate(Bundle savedInstanceState) {    super.onCreate(savedInstanceState);    setContentView(R.layout.activity_main);}</code></pre></blockquote><blockquote><p>一级引用</p><blockquote><p>二级引用</p><blockquote><p>三级引用</p></blockquote></blockquote></blockquote><blockquote><h4 id="这是一个四级标题"><a href="#这是一个四级标题" class="headerlink" title="这是一个四级标题"></a>这是一个四级标题</h4><ol><li>这是第一行列表项</li><li>这是第二行列表项</li></ol><p>以下是分割线</p><hr></blockquote><h3 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h3><p>两个<em>或-代表加粗，一个</em>或-代表斜体，~~代表删除。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">**加粗文本** 或者 __加粗文本__</span><br><span class="line"></span><br><span class="line">*斜体文本*  或者_斜体文本_</span><br><span class="line"></span><br><span class="line">~~删除文本~~</span><br></pre></td></tr></table></figure></p><p>效果如下：</p><p><strong>加粗文本</strong> 或者 <strong>加粗文本</strong></p><p><em>斜体文本</em>  或者<em>斜体文本</em></p><p><del>删除文本</del></p><hr><h2 id="图片与链接"><a href="#图片与链接" class="headerlink" title="图片与链接"></a>图片与链接</h2><p>图片与链接的语法很像，区别在一个 ! 号。二者格式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">图片：![]()    ![图片文本(可忽略)](图片地址)</span><br><span class="line"></span><br><span class="line">链接：[]()     [链接文本](链接地址)</span><br></pre></td></tr></table></figure></p><p>链接又分为<code>行内式</code>、<code>参考式</code>和 <code>自动链接</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">这是行内式链接：[码农的自我修养](https://xiao-chengang.github.io)。</span><br><span class="line"></span><br><span class="line">这是参考式链接：[码农的自我修养][url]，其中url为链接标记，可置于文中任意位置。</span><br><span class="line"></span><br><span class="line">[url]: https://xiao-chengang.github.io/ &quot;码农的自我修养&quot;</span><br><span class="line"></span><br><span class="line">链接标记格式为：[链接标记文本]:  链接地址  链接title(可忽略)</span><br><span class="line"></span><br><span class="line">这是自动链接：直接使用`&lt;&gt;`括起来&lt;https://xiao-chengang.github.io&gt;</span><br><span class="line"></span><br><span class="line">这是图片：![][avatar]  </span><br><span class="line">这是图片：![](/images/md.jpg)</span><br><span class="line"></span><br><span class="line">[avatar]: https://xiao-chengang.github.io/img/md.jpg</span><br></pre></td></tr></table></figure></p><p>效果如下：</p><p>这是行内式链接：<a href="https://xiao-chengang.github.io">码农的自我修养</a>。</p><p>这是参考式链接：<a href="https://xiao-chengang.github.io/" title="码农的自我修养">码农的自我修养</a>，其中url为链接标记，可置于文中任意位置。</p><p>链接标记格式为：[链接标记文本]:  链接地址  链接title(可忽略)</p><p>这是自动链接：直接使用<code>&lt;&gt;</code>括起来<a href="https://xiao-chengang.github.io">https://xiao-chengang.github.io</a></p><p>这是图片：<img src="https://xiao-chengang.github.io/images/md.jpg" alt=""><br>这是图片：<img src="/images/md.jpg" alt="">  </p><hr><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>代码分为<code>行内代码</code>和<code>代码块</code>。</p><ul><li><p>行内代码使用 <code>代码</code> 标识，可嵌入文字中</p></li><li><p>代码块使用4个空格或```标识</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这里是代码</span><br></pre></td></tr></table></figure><ul><li>代码语法高亮在 ```后面加上空格和语言名称即可</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//注意语言前面有空格</span><br><span class="line">这里是代码</span><br></pre></td></tr></table></figure><p>效果如下：<br>这是行内代码<code>onCreate(Bundle savedInstanceState)</code>的例子。</p><p>这是代码块和语法高亮：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 注意java前面有空格</span><br><span class="line">protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">    super.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>表格对齐格式</p><ul><li>居左：:—-</li><li>居中：:—-:或—–</li><li>居右：—-:</li></ul><p>例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">|标题|标题|标题|</span><br><span class="line">|:---|:---:|---:|</span><br><span class="line">|居左测试文本|居中测试文本|居右测试文本|</span><br><span class="line">|居左测试文本1|居中测试文本2|居右测试文本3|</span><br><span class="line">|居左测试文本11|居中测试文本22|居右测试文本33|</span><br><span class="line">|居左测试文本111|居中测试文本222|居右测试文本333|</span><br></pre></td></tr></table></figure></p><p>效果如下：</p><table><thead><tr><th style="text-align:left">标题</th><th style="text-align:center">标题</th><th style="text-align:right">标题</th></tr></thead><tbody><tr><td style="text-align:left">居左测试文本</td><td style="text-align:center">居中测试文本</td><td style="text-align:right">居右测试文本</td></tr><tr><td style="text-align:left">居左测试文本1</td><td style="text-align:center">居中测试文本2</td><td style="text-align:right">居右测试文本3</td></tr><tr><td style="text-align:left">居左测试文本11</td><td style="text-align:center">居中测试文本22</td><td style="text-align:right">居右测试文本33</td></tr><tr><td style="text-align:left">居左测试文本111</td><td style="text-align:center">居中测试文本222</td><td style="text-align:right">居右测试文本333</td></tr></tbody></table><h2 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h2><p>在一行中用三个以上的<code>*</code>、<code>-</code>、<code>_</code>来建立一个分隔线，行内不能有其他东西。也可以在符号间插入空格。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">***</span><br><span class="line">---</span><br><span class="line">___</span><br><span class="line"></span><br><span class="line">* * *</span><br></pre></td></tr></table></figure></p><p>效果均为一条分割线：</p><hr><hr><h2 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h2><p>在行尾添加两个空格加回车表示换行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">这是一行后面加两个空格  </span><br><span class="line">换行</span><br></pre></td></tr></table></figure></p><p>效果如下：<br>这是一行后面加两个空格<br>换行</p><h2 id="脚注-注解"><a href="#脚注-注解" class="headerlink" title="脚注(注解)"></a>脚注(注解)</h2><p>使用[^]来定义脚注：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这是一个脚注的例子[^1]</span><br><span class="line"></span><br><span class="line">[^1]: 这里是脚注</span><br></pre></td></tr></table></figure></p><p>效果如下：<br>这是一个脚注的例子<a href="这里是脚注">^1</a>  </p><hr><h2 id="常用弥补Markdown的Html标签"><a href="#常用弥补Markdown的Html标签" class="headerlink" title="常用弥补Markdown的Html标签"></a>常用弥补Markdown的Html标签</h2><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;font face=&quot;微软雅黑&quot; color=&quot;red&quot; size=&quot;6&quot;&gt;字体及字体颜色和大小&lt;/font&gt;</span><br><span class="line">&lt;font color=&quot;#0000ff&quot;&gt;字体颜色&lt;/font&gt;</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><font face="微软雅黑" color="red" size="6">字体及字体颜色和大小</font></p><p><font color="#0000ff">字体颜色</font></p><hr><h3 id="换行-1"><a href="#换行-1" class="headerlink" title="换行"></a>换行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用html标签`&lt;br/&gt;`&lt;br/&gt;换行</span><br></pre></td></tr></table></figure><p>效果如下</p><p>使用html标签<code>&lt;br/&gt;</code><br>换行</p><hr><h3 id="文本对齐方式"><a href="#文本对齐方式" class="headerlink" title="文本对齐方式"></a>文本对齐方式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;p align=&quot;left&quot;&gt;居左文本&lt;/p&gt;</span><br><span class="line">&lt;p align=&quot;center&quot;&gt;居中文本&lt;/p&gt;</span><br><span class="line">&lt;p align=&quot;right&quot;&gt;居右文本&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>效果如下：  </p><p align="left">居左文本</p><br><p align="center">居中文本</p><br><p align="right">居右文本</p><hr><h3 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;u&gt;下划线文本&lt;/u&gt;</span><br></pre></td></tr></table></figure><p>效果如下：  </p><p><u>下划线文本</u></p><hr><h3 id="That’s-all-Enjoy-it"><a href="#That’s-all-Enjoy-it" class="headerlink" title="That’s all, Enjoy it!"></a>That’s all, Enjoy it!</h3><h3 id="备注：文末有些html标签在简书上不支持，同时，本文提供Markdown源文件，需要的请联系我！"><a href="#备注：文末有些html标签在简书上不支持，同时，本文提供Markdown源文件，需要的请联系我！" class="headerlink" title="备注：文末有些html标签在简书上不支持，同时，本文提供Markdown源文件，需要的请联系我！"></a>备注：文末有些html标签在简书上不支持，同时，本文提供Markdown源文件，需要的请联系我！</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Markdown 是一种轻量级标记语言，它用简洁的语法代替排版，使我们专心于码字。它的目标是实现易读易写，成为一种适用于网络的书写语言。同时，Markdown支持嵌入html标签。&lt;br&gt;注意：Markdown使用#、+、*等符号来标记， 符号后面必须跟上 至少1个 空格才有效！&lt;/p&gt;
&lt;h1 id=&quot;MarkDown的常用语法&quot;&gt;&lt;a href=&quot;#MarkDown的常用语法&quot; class=&quot;headerlink&quot; title=&quot;MarkDown的常用语法&quot;&gt;&lt;/a&gt;MarkDown的常用语法&lt;/h1&gt;&lt;h2 id=&quot;标题&quot;&gt;&lt;a href=&quot;#标题&quot; class=&quot;headerlink&quot; title=&quot;标题&quot;&gt;&lt;/a&gt;标题&lt;/h2&gt;&lt;p&gt;Markdown 标题支持两种形式：&lt;br&gt;
    
    </summary>
    
      <category term="markdown" scheme="http://xiao-chengang.github.io/categories/markdown/"/>
    
    
      <category term="语法" scheme="http://xiao-chengang.github.io/tags/%E8%AF%AD%E6%B3%95/"/>
    
      <category term="markdown" scheme="http://xiao-chengang.github.io/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>前端开发技巧一</title>
    <link href="http://xiao-chengang.github.io/2018/01/18/javascript/web-skill1/"/>
    <id>http://xiao-chengang.github.io/2018/01/18/javascript/web-skill1/</id>
    <published>2018-01-18T07:36:04.000Z</published>
    <updated>2018-03-23T14:29:25.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>禁用电话、邮箱自动识别</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"telephone=no"</span> <span class="attr">name</span>=<span class="string">"format-detection"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"email=no"</span> <span class="attr">name</span>=<span class="string">"format-detection"</span> /&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>获取滚动条的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.scrollY</span><br><span class="line"><span class="built_in">window</span>.scrollX</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><ul><li><p>禁止选择文本</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">-webkit-user-select</span>: <span class="selector-tag">none</span></span><br></pre></td></tr></table></figure></li><li><p>重置按钮样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">-webkit-appearance</span>: <span class="selector-tag">none</span></span><br></pre></td></tr></table></figure></li><li><p>多文本换行</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">overflow</span> : <span class="selector-tag">hidden</span>;</span><br><span class="line"><span class="selector-tag">text-overflow</span>: <span class="selector-tag">ellipsis</span>;</span><br><span class="line"><span class="selector-tag">display</span>: <span class="selector-tag">-webkit-box</span>;</span><br><span class="line"><span class="selector-tag">-webkit-line-clamp</span>: 2;</span><br><span class="line"><span class="selector-tag">-webkit-box-orient</span>: <span class="selector-tag">vertical</span>;</span><br></pre></td></tr></table></figure></li><li><p>快速回弹滚动<br>在iOS上如果你想让一个元素拥有像 Native 的滚动效果，你可以这样做：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">overflow</span>: <span class="selector-tag">auto</span>;</span><br><span class="line"><span class="selector-tag">-webkit-overflow-scrolling</span>: <span class="selector-tag">touch</span>;</span><br></pre></td></tr></table></figure></li></ul><p>对于body滚动，ios8以上，不加此效果同样拥有弹性滚动效果。</p><ul><li>ios和android局部滚动时隐藏原生滚动条<br>android:<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">::-webkit-scrollbar</span>&#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>ios:<br>使用一个稍微高一些div包裹住这个有滚动条的div然后设置overflow:hidden挡住之<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="built_in">-webkit-calc</span>(100% + 5px);</span><br><span class="line">    <span class="attribute">overflow-x</span>: auto;</span><br><span class="line">    <span class="attribute">overflow-y</span>: hidden;</span><br><span class="line">    <span class="attribute">-webkit-overflow-scrolling</span>: touch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;禁用电话、邮箱自动识别&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;telephone=no&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;format-detection&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;email=no&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;format-detection&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;获取滚动条的值&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.scrollY&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.scrollX&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="web" scheme="http://xiao-chengang.github.io/categories/web/"/>
    
    
      <category term="web" scheme="http://xiao-chengang.github.io/tags/web/"/>
    
      <category term="html" scheme="http://xiao-chengang.github.io/tags/html/"/>
    
      <category term="css" scheme="http://xiao-chengang.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>前端开发技巧二</title>
    <link href="http://xiao-chengang.github.io/2018/01/17/javascript/web-skill2/"/>
    <id>http://xiao-chengang.github.io/2018/01/17/javascript/web-skill2/</id>
    <published>2018-01-17T07:36:04.000Z</published>
    <updated>2018-03-23T14:29:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>你曾经看着自己喜爱的网站，是不是想知道它到底是怎么运作的？你看它的布局方式，当你点击按钮的时候的交互，或者其他的部分，有没想过：“我想知道它到底有多么复杂”或者“我希望我也能做到”？</p><p>所有的这些事情都属于前端开发的范畴。虽然网页设计决定网站的外观，但是实现这个网页设计需要前端开发。<br><a id="more"></a><br>前端开发者们使用HTML, CSS, 和JavaScript编写通过网页设计师所创建的web应用程序的设计。他们编写的代码运行在用户浏览器的内部(相反，后端开发人员的代码在web服务器上运行)，想象一下这样的场景：后端开发者就像一个工程师，他们设计和创造让一个城市工作的系统(电力，供水和下水道，分区等)，而前端开发者则规划街道，并确保连接好一切，让人们能过自己的生活(一个简单的比喻，但你能得到一个粗略的概念)，他们还负责确保在前端没有错误和bug，以及确保设计师设计的网页能支持各种平台和浏览器。</p><p>我通过梳理几十个前端开发的工作清单，为了看看目前最需要哪些技能。下面这些是真正的雇主在求职者中寻找的东西(在不久的将来仍然一样)，掌握了下面的这些技能，你肯定能找到一个很棒的前端开发的工作！</p><h3 id="HTML-amp-CSS"><a href="#HTML-amp-CSS" class="headerlink" title="HTML &amp; CSS"></a>HTML &amp; CSS</h3><p>HTML (Hyper Text Markup Language) 和 CSS (Cascading Style Sheets)，是网站编码的最基本的部分。没有这两样东西，你不能完成一个网站的设计，你最终只能在屏幕上看到一个无格式的纯文本。没有HTML，你甚至不能在页面中添加图片。</p><p>在你开始任何web开发的职业道路之前，你都必须要掌握HTML和CSS。好消息是通过短短几周，不管是HTML还是CSS，你就能得到扎实的实践经验。</p><p>最重要的部分：单独的HTML和CSS知识能让你建立基础的网站。</p><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><p>JavaScript能为你的网站添加大量的功能。你甚至能够开发很多基本的web应用程序，仅仅只使用HTML, CSS和 JavaScript(简称JS)。在最基本的层面上，JS能够添加很多互动的元素到你的网站，使用它开发实时更新的地图，<a href="http://www.jacktorrancetrip.com/" target="_blank" rel="noopener">互动电影</a>，和线上游戏。像<a href="https://www.pinterest.com" target="_blank" rel="noopener">pinterest</a>这个网站使用JS让他们的用户使用起来非常简单(事实上，不管你什么时候钉住一张图片页面都不会刷新，这要多亏于JS)。</p><p>它是世界上最受欢迎的编程语言，所以无论你作为开发者的职业生涯如何规划，这是一个非常值得学习的东西。</p><p>更多关于JS的文章在这里： <a href="https://skillcrush.com/2013/04/15/youve-learned-html-css-now-what/" target="_blank" rel="noopener">You’ve Learned HTML and CSS—Now What?</a></p><h3 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h3><p>jQuery是一个JavaScript库：一个插件和扩展的集合，让开发者写JavaScript更快更简单。而不是从头开始编码，jQuery让你添加现有的元素到你的项目中，在必要的时候你也能够定制开发(这是为什么学习JS如此重要的原因之一)。你能使用jQuery做这些事情，比如<a href="http://tutorialzine.com/2011/12/countdown-jquery/" target="_blank" rel="noopener">倒计时</a>，<a href="http://twitter.github.io/typeahead.js/" target="_blank" rel="noopener">自动完成的搜索表单</a>，甚至是自动调整大小的<a href="http://gridster.net/" target="_blank" rel="noopener">栅格布局</a>。</p><h3 id="JavaScript框架"><a href="#JavaScript框架" class="headerlink" title="JavaScript框架"></a>JavaScript框架</h3><p>JS框架(包括AngularJS, Backbone, Ember, 和ReactJS等)能让你的JS代码有一个现成的架构。虽然之前提到的4个是实际的工作清单上最受欢迎的框架，但是根据不同的需求有不同的框架。这些框架真的能让你的开发速度变的更快，就像jQuery一样，让你从头开始编码做的事情更少。</p><h3 id="CSS框架"><a href="#CSS框架" class="headerlink" title="CSS框架"></a>CSS框架</h3><p>CSS框架(最受欢迎的是Bootstrap)是为了写CSS更加简单，如同JS框架是为了JS。它们给你一个更快的编码起点，因为很多的CSS在一个又一个的项目中使用相同的元素，框架在前期为你定义了所有的元素。很多的前端工作清单上都希望你能够熟练掌握怎么使用它们，以及了解它们的工作原理。</p><h3 id="CSS预处理器的经验"><a href="#CSS预处理器的经验" class="headerlink" title="CSS预处理器的经验"></a>CSS预处理器的经验</h3><p>预处理器是另一个加快你CSS编码的东西。CSS预处理器能够给你的CSS添加额外的功能，让我们的CSS可扩展，并且更容易工作。它在你发布网站之前加工你的代码，让它变成格式更美观的、跨浏览器友好的CSS。根据真实的工作清单，SASS和LESS是需求最高的预处理器。</p><h3 id="RESTful服务和APIs的经验"><a href="#RESTful服务和APIs的经验" class="headerlink" title="RESTful服务和APIs的经验"></a>RESTful服务和APIs的经验</h3><p>在这一点，没有太多技术性。REST代表特征状态转移，英文是Representational State Transfer。从基本术语来说，它是一个轻量级的架构，简化了web的网络连接，RESTful服务和APIs都是REST架构的部分。查阅更多关于REST和RESTful服务，请看<a href="https://en.wikipedia.org/wiki/Representational_state_transfer" target="_blank" rel="noopener">这里</a>。</p><p>假设你想写一个程序，展示你所有的社交媒体的朋友的交往顺序，你应该调用Facebook的RESTful接口读取你朋友的列表，并且返回这些数据，Twitter亦然(也要调用RESTful接口)。使用RESTful接口服务的流程一般都是一样的，只是返回的数据不同。</p><p>尽管听起来像很复杂的技术，但它只是一组简单的指导方针，让你知道如何与Web服务进行通信的准则和做法。它们还让你Web服务有更好的表现，规模更好，工作更可靠，而且更容易修改或移动。</p><h3 id="响应式和移动端设计"><a href="#响应式和移动端设计" class="headerlink" title="响应式和移动端设计"></a>响应式和移动端设计</h3><p>就美国而言，使用手机上网的人数超过了用电脑上网的人数。所以不用说，响应式和移动端设计对雇主而言是非常重要的。响应式设计意味布局(有时候还有功能和内容)随着屏幕大小、设备的改变而改变。</p><p>举个例子，当一个网站是被大屏幕的电脑访问时，用户将会看到更多的列，大的图像，以及专门为鼠标和键盘创建的交互。在移动设备上，同样的网站可能只有1列，并且优化成触摸交互，但是使用同样的基本文件。</p><p>移动端设计不仅包括响应式设计，而且还包括创建单独的针对移动设备的设计。有时候你想要用户访问你的站点时，用电脑和智能手机所看到的是完全不同的，在这种情况下，移动端的网站是有意义的。举个例子，银行的线上银行网站，使用单独的移动站点是有很多好处的，它让用户看到距离最近的银行的位置，简化账户信息(因为移动设备屏幕更小)。</p><p>如果你想学习更多的响应式设计，查阅我们的文章，<a href="http://skillcrush.com/blueprint/mobile-web-designer/" target="_blank" rel="noopener">mobile-web-designer</a>，或者 <a href="https://skillcrush.com/2015/04/07/8-secrets-to-mobile-design/" target="_blank" rel="noopener">8 Secrets To Building Mobile Sites Users Love</a>。</p><h3 id="跨浏览器开发"><a href="#跨浏览器开发" class="headerlink" title="跨浏览器开发"></a>跨浏览器开发</h3><p>现代的浏览器在展示网站的一致性上非常的好，但是它们如何解析代码并呈现在屏幕前仍然有一些不同。直到所有的现代浏览器都使用web标准，并能完美的工作之前，知道如何让每一个浏览器都像你期望的那样运行，是非常重要的技能。这就是所有跨浏览器开发的内容。</p><p>查看更多的跨浏览器的兼容性请看<a href="https://en.wikipedia.org/wiki/Cross-browser" target="_blank" rel="noopener">这里</a>或者<a href="https://developer.mozilla.org/en-US/docs/Using_Web_Standards_in_your_Web_Pages/Developing_cross-browser_and_cross-platform_pages" target="_blank" rel="noopener">这里</a>，或者查看更深层次的Daniel Herken的文章<a href="http://www.crossbrowserbook.com/" target="_blank" rel="noopener">Cross Browser Handbook</a>。</p><h3 id="内容管理系统和E-commerce平台"><a href="#内容管理系统和E-commerce平台" class="headerlink" title="内容管理系统和E-commerce平台"></a>内容管理系统和E-commerce平台</h3><p>几乎所有的站点都是建立在内容管理系统(CMS)之上的(E-commerce平台是一个CMS具体的类型)。世界上最受欢迎的CMS是WordPress，它在成千上万的网站的幕后工作(包括Skillcrush！)——60%的CMS网站使用WordPress。</p><p>其他的受欢迎的CMS包括Joomla、Drupal和Magento。尽管知道这些不会让你成为一个WordPress专家，但是它们能让你在使用这些系统的公司(而且很多公司在使用)，找到一份令人满意的工作。</p><h3 id="测试和调试"><a href="#测试和调试" class="headerlink" title="测试和调试"></a>测试和调试</h3><p>这是一个web开发中的事实：产生bug。熟悉测试和调试的过程是至关重要的。</p><p>单元测试是分快测试源代码的过程(这些指令告诉网站要如何工作)。单元测试框架提供一个特殊的方法和架构做这些事情(每个不同的编程语言测试框架也有不同)。</p><p>另一个测试类型是UI测试(也叫验收测试、浏览器测试或者功能测试)，你用它能够察实际情况中，用户在网站行为交互是否正确。你可以编写测试代码，在一个页面发生一个动作之后，寻找特定的HTML(比如如果用户忘记填写必填的表单，一个表单错误的提示框将会弹出)。</p><p>调试(Debugging)简单的说，就是通过测试发现所有的bug和错误(或者你的网站发布后被你的用户发现)，侦测并且知道为什么它们会发生，然后修复这个问题。不同的公司的流程可能稍微有些不同，但只要你掌握了一个，也能很容易适应其他的。</p><h3 id="Git和版本控制系统"><a href="#Git和版本控制系统" class="headerlink" title="Git和版本控制系统"></a>Git和版本控制系统</h3><p>版本控制系统能让你追踪过去的代码，如果你把事情搞砸了，它们也能很容易的让你回退到一个早期的版本。假设你添加了一个自定义的jQuery插件，写到一半突然发现其他的代码出问题了，你能够实用版本控制系统回滚到之前的版本然后用不同的方式再试一次，而不是手动的撤销它然后再修复问题。</p><p>Git是一个被广泛使用的版本控制系统。了解并且知道如何使用Git几乎是所有开发工作的要求之一。这是一个开发者需要的至关重要的技能，但是很少被提及。</p><h3 id="解决问题的能力"><a href="#解决问题的能力" class="headerlink" title="解决问题的能力"></a>解决问题的能力</h3><p>有一个东西不管工作描述还是官方标题，是要求所有前端开发者必须拥有的，那就是优秀的解决问题的能力。从找到如何让设计最好的实现，到修复那些突然出现的错误，到结合前端代码和后端代码一起工作，开发就是解决这些过程中所有的问题。</p><p>假设你创建了一个有完美功能的前端网站，然后你把它交给后端开发者让他们整合到内容管理系统。突然之间，你那些很棒的功能停止工作了，一个好的前端开发者会把它视为一个谜题并且解决它，而不是形成一个灾难。当然，一个优秀的高级前端开发者会预测到这些问题，并且在第一时间阻止它们发生。</p><blockquote><p>原文地址： <a href="https://skillcrush.com/2016/02/11/skills-to-become-a-front-end-developer/" target="_blank" rel="noopener">Exactly What You Need to Know to be a Front End Developer</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;你曾经看着自己喜爱的网站，是不是想知道它到底是怎么运作的？你看它的布局方式，当你点击按钮的时候的交互，或者其他的部分，有没想过：“我想知道它到底有多么复杂”或者“我希望我也能做到”？&lt;/p&gt;
&lt;p&gt;所有的这些事情都属于前端开发的范畴。虽然网页设计决定网站的外观，但是实现这个网页设计需要前端开发。&lt;br&gt;
    
    </summary>
    
      <category term="web" scheme="http://xiao-chengang.github.io/categories/web/"/>
    
    
      <category term="web" scheme="http://xiao-chengang.github.io/tags/web/"/>
    
      <category term="语法" scheme="http://xiao-chengang.github.io/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
</feed>
